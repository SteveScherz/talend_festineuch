// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package festineuch_project.festineuch_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: FestiNeuch Purpose: service pour FestiNeuch<br>
 * Description: service pour FestiNeuch <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class FestiNeuch implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "FestiNeuch";
	private final String projectName = "FESTINEUCH_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					FestiNeuch.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(FestiNeuch.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTClient_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTClient_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractXMLField_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTClient_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTResponse_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedXMLMapHash_row2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedXMLMapHash_row3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedXMLMapHash_row5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTClient_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_3_TXMLMAP_OUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tXMLMap_3_TXMLMAP_IN_error(exception, errorComponent, globalMap);

	}

	public void tXMLMap_3_TXMLMAP_IN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_4_TXMLMAP_OUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tXMLMap_4_TXMLMAP_IN_error(exception, errorComponent, globalMap);

	}

	public void tXMLMap_4_TXMLMAP_IN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTRequest_1_Loop_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tRESTRequest_1_In_error(exception, errorComponent, globalMap);

	}

	public void tRESTRequest_1_In_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXMLMap_2_TXMLMAP_OUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tXMLMap_2_TXMLMAP_IN_error(exception, errorComponent, globalMap);

	}

	public void tXMLMap_2_TXMLMAP_IN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTRequest_1_Loop_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTClient_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRESTRequest_1_Loop_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	private boolean runInTalendEsbRuntimeContainer = false;

	public void setRunInTalendEsbRuntimeContainer(boolean flag) {
		runInTalendEsbRuntimeContainer = flag;
	}

	protected String restEndpoint;

	public void setRestEndpoint(String restEndpoint) {
		this.restEndpoint = restEndpoint;
	}

	public String getRestEndpoint() {
		return "http://localhost:8088/";
	}

	private boolean runInDaemonMode = true;

	public void setRunInDaemonMode(boolean flag) {
		runInDaemonMode = flag;
	}

	private boolean restTalendJobAlreadyStarted = false;

	/**
	 * REST provider implementation
	 */
	@javax.ws.rs.Path("/")
	public static class RestServiceProviderImpl4TalendJob {

		@javax.ws.rs.core.Context
		private org.apache.cxf.jaxrs.ext.MessageContext messageContext;

		private final FestiNeuch job;

		public RestServiceProviderImpl4TalendJob(FestiNeuch job) {
			this.job = job;
		}

		private void populateRequestWithJobContext(java.util.Map<String, Object> requestGlobalMap, FestiNeuch job) {
			// pass job DataSources
			java.util.Map<String, routines.system.TalendDataSource> talendDataSources = (java.util.Map<String, routines.system.TalendDataSource>) job.globalMap
					.get(KEY_DB_DATASOURCES);
			if (null != talendDataSources) {
				java.util.Map<String, routines.system.TalendDataSource> restDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
				for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry : talendDataSources
						.entrySet()) {
					restDataSources.put(talendDataSourceEntry.getKey(),
							new routines.system.TalendDataSource(talendDataSourceEntry.getValue().getRawDataSource()));
				}
				requestGlobalMap.put(KEY_DB_DATASOURCES, restDataSources);
			}

			// pass job shared connections
			requestGlobalMap.putAll(job.getSharedConnections4REST());

			// pass job concurrent map
			requestGlobalMap.put("concurrentHashMap", job.globalMap.get("concurrentHashMap"));
		}

		private void closePassedDataSourceConnections(java.util.Map<String, Object> requestGlobalMap) {
			// close connections in passed job DataSources
			try {
				java.util.Map<String, routines.system.TalendDataSource> restDataSources = (java.util.Map<String, routines.system.TalendDataSource>) requestGlobalMap
						.get(KEY_DB_DATASOURCES);
				if (null != restDataSources) {
					for (routines.system.TalendDataSource restDataSource : restDataSources.values()) {
						restDataSource.close();
					}
				}
			} catch (Throwable e) {
				e.printStackTrace(System.err);
			}
		}

		private javax.ws.rs.core.Response processRequest(java.util.Map<String, Object> request) {

			final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

			try {
				globalMap.put("restRequest", request);

				populateRequestWithJobContext(globalMap, job);

				job.tRESTRequest_1_LoopProcess(globalMap);

				java.util.Map<String, Object> response = (java.util.Map<String, Object>) globalMap.get("restResponse");

				Object responseBody = null;
				Integer status = null;
				java.util.Map<String, String> headers = null;
				if (null != response) {
					Object dropJsonRootProp = response.get("drop.json.root.element");
					Boolean dropJsonRoot = (null == dropJsonRootProp) ? false : (Boolean) dropJsonRootProp;
					messageContext.put("drop.json.root.element", dropJsonRoot.toString());

					responseBody = response.get("BODY");
					status = (Integer) response.get("STATUS");
					headers = (java.util.Map<String, String>) response.get("HEADERS");
				}
				if (null == status) {
					status = (request.containsKey("STATUS")) ? (Integer) request.get("STATUS") : 404;
				}

				javax.ws.rs.core.Response.ResponseBuilder responseBuilder = javax.ws.rs.core.Response.status(status)
						.entity(responseBody);
				if (headers != null) {
					for (java.util.Map.Entry<String, String> header : headers.entrySet()) {
						responseBuilder.header(header.getKey(), header.getValue());
					}
				}

				return responseBuilder.build();

			} catch (Throwable ex) {
				ex.printStackTrace();
				throw new javax.ws.rs.WebApplicationException(ex, 500);
			} finally {
				// close DB connections
				closePassedDataSourceConnections(globalMap);
			}
		}

		private javax.ws.rs.core.Response processStreamingResponseRequest(final java.util.Map<String, Object> request) {

			javax.ws.rs.core.StreamingOutput streamingOutput = new javax.ws.rs.core.StreamingOutput() {
				public void write(java.io.OutputStream output) {

					final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

					try {
						globalMap.put("restResponseStream", output);

						globalMap.put("restRequest", request);

						populateRequestWithJobContext(globalMap, job);

						job.tRESTRequest_1_LoopProcess(globalMap);

						if (globalMap.containsKey("restResponseWrappingClosure")) {
							output.write(((String) globalMap.get("restResponseWrappingClosure")).getBytes());
						}
					} catch (Throwable ex) {
						ex.printStackTrace();
						throw new javax.ws.rs.WebApplicationException(ex, 500);
					} finally {
						// close DB connections
						closePassedDataSourceConnections(globalMap);
					}
				}
			};

			return javax.ws.rs.core.Response.ok().entity(streamingOutput).build();
		}

		@javax.ws.rs.GET()

		@javax.ws.rs.Path("/benevole/{latitude}&{longitude}")
		@javax.ws.rs.Produces({ "application/xml", "text/xml", "application/json" })
		public javax.ws.rs.core.Response benevoleposition(

				@javax.ws.rs.PathParam("latitude") String latitude, @javax.ws.rs.PathParam("longitude") String longitude

		) {
			java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
			request_tRESTRequest_1.put("VERB", "GET");
			request_tRESTRequest_1.put("OPERATION", "benevoleposition");
			request_tRESTRequest_1.put("PATTERN", "/benevole/{latitude}&{longitude}");

			populateRequestInfo(request_tRESTRequest_1, messageContext);

			java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();

			parameters_tRESTRequest_1.put("PATH:latitude:id_String", latitude);

			parameters_tRESTRequest_1.put("PATH:longitude:id_String", longitude);

			request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);

			return processRequest(request_tRESTRequest_1);
		}

		@javax.ws.rs.GET()

		@javax.ws.rs.Path("/benevole/{BookingID}")
		@javax.ws.rs.Produces({ "application/xml", "text/xml", "application/json" })
		public javax.ws.rs.core.Response benevolerequest(

				@javax.ws.rs.PathParam("BookingID") String BookingID

		) {
			java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
			request_tRESTRequest_1.put("VERB", "GET");
			request_tRESTRequest_1.put("OPERATION", "benevolerequest");
			request_tRESTRequest_1.put("PATTERN", "/benevole/{BookingID}");

			populateRequestInfo(request_tRESTRequest_1, messageContext);

			java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();

			parameters_tRESTRequest_1.put("PATH:BookingID:id_String", BookingID);

			request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);

			return processRequest(request_tRESTRequest_1);
		}

		@javax.ws.rs.GET()

		@javax.ws.rs.Path("/benevoles")
		@javax.ws.rs.Produces({ "application/xml", "text/xml", "application/json" })
		public javax.ws.rs.core.Response benevolesrequest(

		) {
			java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
			request_tRESTRequest_1.put("VERB", "GET");
			request_tRESTRequest_1.put("OPERATION", "benevolesrequest");
			request_tRESTRequest_1.put("PATTERN", "/benevoles");

			populateRequestInfo(request_tRESTRequest_1, messageContext);

			java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();

			request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);

			return processRequest(request_tRESTRequest_1);
		}

		@javax.ws.rs.GET()

		@javax.ws.rs.Path("/")
		@javax.ws.rs.Produces({ "application/xml", "text/xml", "application/json" })
		public javax.ws.rs.core.Response Requete(

		) {
			java.util.Map<String, Object> request_tRESTRequest_1 = new java.util.HashMap<String, Object>();
			request_tRESTRequest_1.put("VERB", "GET");
			request_tRESTRequest_1.put("OPERATION", "Requete");
			request_tRESTRequest_1.put("PATTERN", "/");

			populateRequestInfo(request_tRESTRequest_1, messageContext);

			java.util.Map<String, Object> parameters_tRESTRequest_1 = new java.util.HashMap<String, Object>();

			request_tRESTRequest_1.put("PARAMS", parameters_tRESTRequest_1);

			return processRequest(request_tRESTRequest_1);
		}

		public javax.ws.rs.core.Response handleWrongRequest(org.apache.cxf.jaxrs.ext.MessageContext context, int status,
				String error) {

			// System.out.println("wrong call [uri: " + context.getUriInfo().getPath() + " ;
			// method: " + context.getRequest().getMethod() + " ; status: " + status + " ;
			// error: " + error + "]");

			java.util.Map<String, Object> wrongRequest = new java.util.HashMap<String, Object>();

			wrongRequest.put("ERROR", error);
			wrongRequest.put("STATUS", status);
			wrongRequest.put("VERB", context.getRequest().getMethod());
			wrongRequest.put("URI", context.getUriInfo().getPath());
			wrongRequest.put("URI_BASE", context.getUriInfo().getBaseUri().toString());
			wrongRequest.put("URI_ABSOLUTE", context.getUriInfo().getAbsolutePath().toString());
			wrongRequest.put("URI_REQUEST", context.getUriInfo().getRequestUri().toString());

			return processRequest(wrongRequest);
		}

		private void populateRequestInfo(java.util.Map<String, Object> request,
				org.apache.cxf.jaxrs.ext.MessageContext context) {
			final javax.ws.rs.core.UriInfo ui = context.getUriInfo();

			request.put("URI", ui.getPath());
			request.put("URI_BASE", ui.getBaseUri().toString());
			request.put("URI_ABSOLUTE", ui.getAbsolutePath().toString());
			request.put("URI_REQUEST", ui.getRequestUri().toString());

			request.put("ALL_HEADER_PARAMS", context.getHttpHeaders().getRequestHeaders());
			request.put("ALL_QUERY_PARAMS", ui.getQueryParameters());

			javax.ws.rs.core.SecurityContext securityContext = context.getSecurityContext();
			if (null != securityContext && null != securityContext.getUserPrincipal()) {
				request.put("PRINCIPAL_NAME", securityContext.getUserPrincipal().getName());
			}

			request.put("CorrelationID", context.get("CorrelationID"));

			request.put("MESSAGE_CONTEXT", context);
		}

		private void populateMultipartRequestInfo(java.util.Map<String, Object> request,
				org.apache.cxf.jaxrs.ext.MessageContext context, java.util.List<String> partNames) {
			java.util.Map<String, String> attachmentFilenames = new java.util.HashMap<String, String>();

			java.util.Map<String, java.util.Map<String, java.util.List<String>>> attachmentHeaders = new java.util.HashMap<String, java.util.Map<String, java.util.List<String>>>();

			for (String partName : partNames) {
				org.apache.cxf.jaxrs.ext.multipart.Attachment attachment = getFirstMatchingPart(context, partName);
				if (null != attachment) {
					attachmentHeaders.put(partName, attachment.getHeaders());
					if (null != attachment.getContentDisposition()) {
						String filename = attachment.getContentDisposition().getParameter("filename");
						if (null != filename) {
							attachmentFilenames.put(partName, filename);
						}
					}
				}
			}

			request.put("ATTACHMENT_HEADERS", attachmentHeaders);
			request.put("ATTACHMENT_FILENAMES", attachmentFilenames);
		}

		private static org.apache.cxf.jaxrs.ext.multipart.Attachment getFirstMatchingPart(
				org.apache.cxf.jaxrs.ext.MessageContext context, String partName) {
			List<org.apache.cxf.jaxrs.ext.multipart.Attachment> attachments = org.apache.cxf.jaxrs.utils.multipart.AttachmentUtils
					.getAttachments(context);
			for (org.apache.cxf.jaxrs.ext.multipart.Attachment attachment : attachments) {
				if (partName.equals(attachment.getContentId())) {
					return attachment;
				}
				org.apache.cxf.jaxrs.ext.multipart.ContentDisposition cd = attachment.getContentDisposition();
				if (null != cd && partName.equals(cd.getParameter("name"))) {
					return attachment;
				}
			}
			// unexpected
			throw new javax.ws.rs.InternalServerErrorException();
		}
	}

	public static class ExceptionMapper4TalendJobRestService
			extends org.apache.cxf.jaxrs.impl.WebApplicationExceptionMapper {

		@javax.ws.rs.core.Context
		private org.apache.cxf.jaxrs.ext.MessageContext messageContext;

		private RestServiceProviderImpl4TalendJob provider;

		public ExceptionMapper4TalendJobRestService(RestServiceProviderImpl4TalendJob provider) {
			this.provider = provider;
		}

		public javax.ws.rs.core.Response toResponse(javax.ws.rs.WebApplicationException ex) {
			String error = null;
			javax.ws.rs.core.Response response = ex.getResponse();
			if (null != response && null != response.getEntity()) {
				error = response.getEntity().toString();
			}
			response = super.toResponse(ex);
			if (null == error) {
				if (null != response && null != response.getEntity()) {
					error = response.getEntity().toString();
				} else {
					error = null == ex.getCause() ? ex.getMessage() : ex.getCause().getMessage();
				}
			}
			response = provider.handleWrongRequest(messageContext, response.getStatus(), error);

			java.util.List<javax.ws.rs.core.MediaType> accepts = messageContext.getHttpHeaders()
					.getAcceptableMediaTypes();
			javax.ws.rs.core.MediaType responseType = accepts.isEmpty() ? null : accepts.get(0);

			if (responseType == null
					|| !responseType.getSubtype().equals("xml") && !responseType.getSubtype().equals("json")) {
				responseType = javax.ws.rs.core.MediaType.APPLICATION_XML_TYPE;
			}

			javax.ws.rs.core.Response r = javax.ws.rs.core.Response.status(response.getStatus())
					.entity(response.getEntity()).type(responseType).build();

			if (response.getHeaders() != null) {
				r.getHeaders().putAll(response.getHeaders());
			}

			return r;
		}
	}

	protected String checkEndpointUrl(String url) {
		final String defaultEndpointUrl = "http://127.0.0.1:8090/";

		String endpointUrl = url;
		if (null == endpointUrl || endpointUrl.trim().isEmpty()) {
			endpointUrl = defaultEndpointUrl;
		} else if (!endpointUrl.contains("://")) { // relative
			if (endpointUrl.startsWith("/")) {
				endpointUrl = endpointUrl.substring(1);
			}
			endpointUrl = defaultEndpointUrl + endpointUrl;
		}

		// test for busy
		java.net.URI endpointURI = java.net.URI.create(endpointUrl);
		String host = endpointURI.getHost();
		try {
			if (java.net.InetAddress.getByName(host).isLoopbackAddress()) {
				int port = endpointURI.getPort();
				java.net.ServerSocket ss = null;
				try {
					ss = new java.net.ServerSocket(port);
				} catch (IOException e) {
					// rethrow exception
					throw new IllegalArgumentException(
							"Cannot start provider with uri: " + endpointUrl + ". Port " + port + " already in use.");
				} finally {
					if (ss != null) {
						try {
							ss.close();
						} catch (IOException e) {
							// ignore
						}
					}
				}
				try {
					// ok, let's doublecheck for silent listeners
					java.net.Socket cs = new java.net.Socket(host, port);
					// if succeed - somebody silently listening, fail!
					cs.close();
					// rethrow exception
					throw new IllegalArgumentException(
							"Cannot start provider with uri: " + endpointUrl + ". Port " + port + " already in use.");
				} catch (IOException e) {
					// ok, nobody listens, proceed
				}
			}
		} catch (java.net.UnknownHostException e) {
			// ignore
		}

		return endpointUrl;
	}

	public static class StreamingDOM4JProvider extends org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider {

		public static final String SUPRESS_XML_DECLARATION = "supress.xml.declaration";

		private java.util.Map<String, Object> globalMap = null;

		public void setGlobalMap(java.util.Map<String, Object> globalMap) {
			this.globalMap = globalMap;
		}

		public void writeTo(org.dom4j.Document doc, Class<?> cls, java.lang.reflect.Type type,
				java.lang.annotation.Annotation[] anns, javax.ws.rs.core.MediaType mt,
				javax.ws.rs.core.MultivaluedMap<String, Object> headers, java.io.OutputStream os)
				throws java.io.IOException, javax.ws.rs.WebApplicationException {
			if (mt.getSubtype().contains("xml")) {
				org.dom4j.io.XMLWriter writer;
				org.apache.cxf.message.Message currentMessage = null;
				if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
					currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
				} else {
					currentMessage = (org.apache.cxf.message.Message) ((java.util.Map<String, Object>) globalMap
							.get("restRequest")).get("CURRENT_MESSAGE");
				}

				if (currentMessage != null && currentMessage.getExchange() != null
						&& currentMessage.getExchange().containsKey(SUPRESS_XML_DECLARATION)) {
					org.dom4j.io.OutputFormat format = new org.dom4j.io.OutputFormat();
					format.setSuppressDeclaration(true);
					writer = new org.dom4j.io.XMLWriter(os, format);
				} else {
					writer = new org.dom4j.io.XMLWriter(os);
				}
				writer.write(doc);
				writer.flush();
			} else {
				super.writeTo(doc, cls, type, anns, mt, headers, os);
			}
		}
	}

	Thread4RestServiceProviderEndpoint thread4RestServiceProviderEndpoint = null;

	class Thread4RestServiceProviderEndpoint extends Thread {

		private final String endpointUrl;

		private final FestiNeuch job;

		private org.apache.cxf.endpoint.Server server;

		private org.apache.cxf.jaxrs.JAXRSServerFactoryBean sf;

		public Thread4RestServiceProviderEndpoint(FestiNeuch job, String endpointUrl) {
			this.job = job;
			this.endpointUrl = endpointUrl;
			this.sf = new org.apache.cxf.jaxrs.JAXRSServerFactoryBean();
		}

		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		public org.apache.cxf.endpoint.Server getServer() {
			return server;
		}

		public org.apache.cxf.jaxrs.JAXRSServerFactoryBean getJAXRSServerFactoryBean() {
			return sf;
		}

		public void run() {

			try {
				RestServiceProviderImpl4TalendJob provider = new RestServiceProviderImpl4TalendJob(job);

				if (sf.getProperties() == null) {
					sf.setProperties(new java.util.HashMap<String, Object>());
				}

				java.util.List<Object> providers = (java.util.List<Object>) sf.getProviders();
				providers.add(new ExceptionMapper4TalendJobRestService(provider));
				providers.add(new StreamingDOM4JProvider());

				org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider = new org.apache.cxf.jaxrs.provider.json.JSONProvider();
				jsonProvider.setIgnoreNamespaces(true);
				jsonProvider.setAttributesToElements(true);

				jsonProvider.setConvertTypesToStrings(false);

				providers.add(jsonProvider);
				sf.setProviders(providers);
				sf.setTransportId("http://cxf.apache.org/transports/http");
				sf.setResourceClasses(RestServiceProviderImpl4TalendJob.class);
				sf.setResourceProvider(RestServiceProviderImpl4TalendJob.class,
						new org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider(provider));
				sf.setAddress(endpointUrl);

				final java.util.List<org.apache.cxf.feature.Feature> features = sf.getFeatures() == null
						? new java.util.ArrayList<org.apache.cxf.feature.Feature>()
						: sf.getFeatures();

				sf.setFeatures(features);

				server = sf.create();

				// System.out.println("REST service [endpoint: " + endpointUrl + "] published");
			} catch (Throwable e) {
				e.printStackTrace();
			}
		}

		public void stopEndpoint() {
			if (null != server) {
				server.stop();
				server.destroy();
				// System.out.println("REST service [endpoint: " + endpointUrl + "]
				// unpublished");
			}
		}
	}

	public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_FESTINEUCH_PROJECT_FestiNeuch = new byte[0];
		static byte[] commonByteArray_FESTINEUCH_PROJECT_FestiNeuch = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String BookingID;

		public String getBookingID() {
			return this.BookingID;
		}

		public String ContactID;

		public String getContactID() {
			return this.ContactID;
		}

		public String CompanyName;

		public String getCompanyName() {
			return this.CompanyName;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Surname;

		public String getSurname() {
			return this.Surname;
		}

		public String Address1;

		public String getAddress1() {
			return this.Address1;
		}

		public String Address2;

		public String getAddress2() {
			return this.Address2;
		}

		public String Address3;

		public String getAddress3() {
			return this.Address3;
		}

		public String Address4;

		public String getAddress4() {
			return this.Address4;
		}

		public String Postcode;

		public String getPostcode() {
			return this.Postcode;
		}

		public String Telephone;

		public String getTelephone() {
			return this.Telephone;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.BookingID == null) ? 0 : this.BookingID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.BookingID == null) {
				if (other.BookingID != null)
					return false;

			} else if (!this.BookingID.equals(other.BookingID))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.BookingID = this.BookingID;
			other.ContactID = this.ContactID;
			other.CompanyName = this.CompanyName;
			other.Name = this.Name;
			other.Surname = this.Surname;
			other.Address1 = this.Address1;
			other.Address2 = this.Address2;
			other.Address3 = this.Address3;
			other.Address4 = this.Address4;
			other.Postcode = this.Postcode;
			other.Telephone = this.Telephone;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.BookingID = this.BookingID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FESTINEUCH_PROJECT_FestiNeuch.length) {
					if (length < 1024 && commonByteArray_FESTINEUCH_PROJECT_FestiNeuch.length == 0) {
						commonByteArray_FESTINEUCH_PROJECT_FestiNeuch = new byte[1024];
					} else {
						commonByteArray_FESTINEUCH_PROJECT_FestiNeuch = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FESTINEUCH_PROJECT_FestiNeuch, 0, length);
				strReturn = new String(commonByteArray_FESTINEUCH_PROJECT_FestiNeuch, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FESTINEUCH_PROJECT_FestiNeuch) {

				try {

					int length = 0;

					this.BookingID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.BookingID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ContactID = readString(dis, ois);

				this.CompanyName = readString(dis, ois);

				this.Name = readString(dis, ois);

				this.Surname = readString(dis, ois);

				this.Address1 = readString(dis, ois);

				this.Address2 = readString(dis, ois);

				this.Address3 = readString(dis, ois);

				this.Address4 = readString(dis, ois);

				this.Postcode = readString(dis, ois);

				this.Telephone = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.ContactID, dos, oos);

				writeString(this.CompanyName, dos, oos);

				writeString(this.Name, dos, oos);

				writeString(this.Surname, dos, oos);

				writeString(this.Address1, dos, oos);

				writeString(this.Address2, dos, oos);

				writeString(this.Address3, dos, oos);

				writeString(this.Address4, dos, oos);

				writeString(this.Postcode, dos, oos);

				writeString(this.Telephone, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("BookingID=" + BookingID);
			sb.append(",ContactID=" + ContactID);
			sb.append(",CompanyName=" + CompanyName);
			sb.append(",Name=" + Name);
			sb.append(",Surname=" + Surname);
			sb.append(",Address1=" + Address1);
			sb.append(",Address2=" + Address2);
			sb.append(",Address3=" + Address3);
			sb.append(",Address4=" + Address4);
			sb.append(",Postcode=" + Postcode);
			sb.append(",Telephone=" + Telephone);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.BookingID, other.BookingID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedXMLMapHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedXMLMapHash_row2", false);
				start_Hash.put("tAdvancedXMLMapHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedXMLMapHash_row2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tAdvancedXMLMapHash_row2 = 0;

				// connection name:row2
				// source node:tFileInputDelimited_2 - inputs:(after_tRESTRequest_1)
				// outputs:(row2,row2) | target node:tAdvancedXMLMapHash_row2 - inputs:(row2)
				// outputs:()
				// linked node: tXMLMap_3 - inputs:(row2,benevolerequest)
				// outputs:(copyOfSortieBenevole)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct>getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedXMLMapHash_row2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;

				char fieldSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_2 = ((String) ",").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_2 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_2 = /** Start field tFileInputDelimited_2:FILENAME */
						"C:/Users/steve/Downloads/EchantillonDonnéesFestineuch (2)/Benevoles.csv"/**
																									 * End field
																									 * tFileInputDelimited_2:FILENAME
																									 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;

				try {

					String[] rowtFileInputDelimited_2 = null;
					int currentLinetFileInputDelimited_2 = 0;
					int outputLinetFileInputDelimited_2 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_2 = 0;
							if (footer_value_tFileInputDelimited_2 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_2,
									fieldSeparator_tFileInputDelimited_2[0], "US-ASCII");
						} else {
							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(new java.io.InputStreamReader(
											new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_2)),
											"US-ASCII")),
									fieldSeparator_tFileInputDelimited_2[0]);
						}

						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
							csvReadertFileInputDelimited_2.setLineEnd("" + rowSeparator_tFileInputDelimited_2[0]);

						csvReadertFileInputDelimited_2.setQuoteChar('"');

						csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());

						if (footer_tFileInputDelimited_2 > 0) {
							for (totalLinetFileInputDelimited_2 = 0; totalLinetFileInputDelimited_2 < 2; totalLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
							csvReadertFileInputDelimited_2.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_2.readNext()) {

								totalLinetFileInputDelimited_2++;

							}
							int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2
									- footer_tFileInputDelimited_2 < 0 ? 0
											: totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2;
							if (lastLinetFileInputDelimited_2 > 0) {
								lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2
										? lastLinetFileInputDelimited_2
										: lastLineTemptFileInputDelimited_2;
							} else {
								lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
							}

							csvReadertFileInputDelimited_2.close();
							if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_2,
										fieldSeparator_tFileInputDelimited_2[0], "US-ASCII");
							} else {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_2)),
														"US-ASCII")),
										fieldSeparator_tFileInputDelimited_2[0]);
							}
							csvReadertFileInputDelimited_2.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
								csvReadertFileInputDelimited_2.setLineEnd("" + rowSeparator_tFileInputDelimited_2[0]);

							csvReadertFileInputDelimited_2.setQuoteChar('"');

							csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());

						}

						if (limittFileInputDelimited_2 != 0) {
							for (currentLinetFileInputDelimited_2 = 0; currentLinetFileInputDelimited_2 < 2; currentLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
						}
						csvReadertFileInputDelimited_2.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_2 != 0 && csvReadertFileInputDelimited_2 != null
							&& csvReadertFileInputDelimited_2.readNext()) {
						rowstate_tFileInputDelimited_2.reset();

						rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2.getValues();

						currentLinetFileInputDelimited_2++;

						if (lastLinetFileInputDelimited_2 > -1
								&& currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
							break;
						}
						outputLinetFileInputDelimited_2++;
						if (limittFileInputDelimited_2 > 0
								&& outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
							break;
						}

						row2 = null;

						row2 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row2 = new row2Struct();
						try {

							char fieldSeparator_tFileInputDelimited_2_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_2_ListType = ((String) ",").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								row2.BookingID = null;

								row2.ContactID = null;

								row2.CompanyName = null;

								row2.Name = null;

								row2.Surname = null;

								row2.Address1 = null;

								row2.Address2 = null;

								row2.Address3 = null;

								row2.Address4 = null;

								row2.Postcode = null;

								row2.Telephone = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_2 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_2 = 0;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.BookingID = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row2.BookingID = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 1;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.ContactID = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row2.ContactID = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 2;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.CompanyName = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row2.CompanyName = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 3;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.Name = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row2.Name = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 4;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.Surname = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row2.Surname = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 5;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.Address1 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row2.Address1 = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 6;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.Address2 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row2.Address2 = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 7;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.Address3 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row2.Address3 = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 8;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.Address4 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row2.Address4 = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 9;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.Postcode = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row2.Postcode = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 10;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row2.Telephone = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row2.Telephone = null;

								}

							}

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row2 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tAdvancedXMLMapHash_row2 main ] start
							 */

							currentComponent = "tAdvancedXMLMapHash_row2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
							}

							row2Struct row2_HashRow = new row2Struct();

							row2_HashRow.BookingID = row2.BookingID;

							row2_HashRow.ContactID = row2.ContactID;

							row2_HashRow.CompanyName = row2.CompanyName;

							row2_HashRow.Name = row2.Name;

							row2_HashRow.Surname = row2.Surname;

							row2_HashRow.Address1 = row2.Address1;

							row2_HashRow.Address2 = row2.Address2;

							row2_HashRow.Address3 = row2.Address3;

							row2_HashRow.Address4 = row2.Address4;

							row2_HashRow.Postcode = row2.Postcode;

							row2_HashRow.Telephone = row2.Telephone;

							tHash_Lookup_row2.put(row2_HashRow);

							tos_count_tAdvancedXMLMapHash_row2++;

							/**
							 * [tAdvancedXMLMapHash_row2 main ] stop
							 */

							/**
							 * [tAdvancedXMLMapHash_row2 process_data_begin ] start
							 */

							currentComponent = "tAdvancedXMLMapHash_row2";

							/**
							 * [tAdvancedXMLMapHash_row2 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedXMLMapHash_row2 process_data_end ] start
							 */

							currentComponent = "tAdvancedXMLMapHash_row2";

							/**
							 * [tAdvancedXMLMapHash_row2 process_data_end ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						nb_line_tFileInputDelimited_2++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_2 != null) {
							csvReadertFileInputDelimited_2.close();
						}
					}
					if (csvReadertFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE", nb_line_tFileInputDelimited_2);
					}

				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tAdvancedXMLMapHash_row2 end ] start
				 */

				currentComponent = "tAdvancedXMLMapHash_row2";

				tHash_Lookup_row2.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tAdvancedXMLMapHash_row2", true);
				end_Hash.put("tAdvancedXMLMapHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedXMLMapHash_row2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tAdvancedXMLMapHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedXMLMapHash_row2";

				/**
				 * [tAdvancedXMLMapHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
		final static byte[] commonByteArrayLock_FESTINEUCH_PROJECT_FestiNeuch = new byte[0];
		static byte[] commonByteArray_FESTINEUCH_PROJECT_FestiNeuch = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String BookingID;

		public String getBookingID() {
			return this.BookingID;
		}

		public String ContactID;

		public String getContactID() {
			return this.ContactID;
		}

		public String CompanyName;

		public String getCompanyName() {
			return this.CompanyName;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Surname;

		public String getSurname() {
			return this.Surname;
		}

		public String Address1;

		public String getAddress1() {
			return this.Address1;
		}

		public String Address2;

		public String getAddress2() {
			return this.Address2;
		}

		public String Address3;

		public String getAddress3() {
			return this.Address3;
		}

		public String Address4;

		public String getAddress4() {
			return this.Address4;
		}

		public String Postcode;

		public String getPostcode() {
			return this.Postcode;
		}

		public String Telephone;

		public String getTelephone() {
			return this.Telephone;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.BookingID == null) ? 0 : this.BookingID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.BookingID == null) {
				if (other.BookingID != null)
					return false;

			} else if (!this.BookingID.equals(other.BookingID))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.BookingID = this.BookingID;
			other.ContactID = this.ContactID;
			other.CompanyName = this.CompanyName;
			other.Name = this.Name;
			other.Surname = this.Surname;
			other.Address1 = this.Address1;
			other.Address2 = this.Address2;
			other.Address3 = this.Address3;
			other.Address4 = this.Address4;
			other.Postcode = this.Postcode;
			other.Telephone = this.Telephone;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.BookingID = this.BookingID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FESTINEUCH_PROJECT_FestiNeuch.length) {
					if (length < 1024 && commonByteArray_FESTINEUCH_PROJECT_FestiNeuch.length == 0) {
						commonByteArray_FESTINEUCH_PROJECT_FestiNeuch = new byte[1024];
					} else {
						commonByteArray_FESTINEUCH_PROJECT_FestiNeuch = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FESTINEUCH_PROJECT_FestiNeuch, 0, length);
				strReturn = new String(commonByteArray_FESTINEUCH_PROJECT_FestiNeuch, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FESTINEUCH_PROJECT_FestiNeuch) {

				try {

					int length = 0;

					this.BookingID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.BookingID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ContactID = readString(dis, ois);

				this.CompanyName = readString(dis, ois);

				this.Name = readString(dis, ois);

				this.Surname = readString(dis, ois);

				this.Address1 = readString(dis, ois);

				this.Address2 = readString(dis, ois);

				this.Address3 = readString(dis, ois);

				this.Address4 = readString(dis, ois);

				this.Postcode = readString(dis, ois);

				this.Telephone = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.ContactID, dos, oos);

				writeString(this.CompanyName, dos, oos);

				writeString(this.Name, dos, oos);

				writeString(this.Surname, dos, oos);

				writeString(this.Address1, dos, oos);

				writeString(this.Address2, dos, oos);

				writeString(this.Address3, dos, oos);

				writeString(this.Address4, dos, oos);

				writeString(this.Postcode, dos, oos);

				writeString(this.Telephone, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("BookingID=" + BookingID);
			sb.append(",ContactID=" + ContactID);
			sb.append(",CompanyName=" + CompanyName);
			sb.append(",Name=" + Name);
			sb.append(",Surname=" + Surname);
			sb.append(",Address1=" + Address1);
			sb.append(",Address2=" + Address2);
			sb.append(",Address3=" + Address3);
			sb.append(",Address4=" + Address4);
			sb.append(",Postcode=" + Postcode);
			sb.append(",Telephone=" + Telephone);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.BookingID, other.BookingID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tAdvancedXMLMapHash_row3 begin ] start
				 */

				ok_Hash.put("tAdvancedXMLMapHash_row3", false);
				start_Hash.put("tAdvancedXMLMapHash_row3", System.currentTimeMillis());

				currentComponent = "tAdvancedXMLMapHash_row3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tAdvancedXMLMapHash_row3 = 0;

				// connection name:row3
				// source node:tFileInputDelimited_3 - inputs:(after_tRESTRequest_1)
				// outputs:(row3,row3) | target node:tAdvancedXMLMapHash_row3 - inputs:(row3)
				// outputs:()
				// linked node: tXMLMap_4 - inputs:(row3,row5,benevoleposition)
				// outputs:(copyOfcopyOfSortieBenevole)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row3Struct>getLookup(matchingModeEnum_row3);

				globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);

				/**
				 * [tAdvancedXMLMapHash_row3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				int footer_tFileInputDelimited_3 = 0;
				int totalLinetFileInputDelimited_3 = 0;
				int limittFileInputDelimited_3 = -1;
				int lastLinetFileInputDelimited_3 = -1;

				char fieldSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_3 = ((String) ",").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_3 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_3 = /** Start field tFileInputDelimited_3:FILENAME */
						"C:/Users/steve/Downloads/EchantillonDonnéesFestineuch (2)/Benevoles.csv"/**
																									 * End field
																									 * tFileInputDelimited_3:FILENAME
																									 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_3 = null;

				try {

					String[] rowtFileInputDelimited_3 = null;
					int currentLinetFileInputDelimited_3 = 0;
					int outputLinetFileInputDelimited_3 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_3 = 0;
							if (footer_value_tFileInputDelimited_3 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_3,
									fieldSeparator_tFileInputDelimited_3[0], "US-ASCII");
						} else {
							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(new java.io.InputStreamReader(
											new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_3)),
											"US-ASCII")),
									fieldSeparator_tFileInputDelimited_3[0]);
						}

						csvReadertFileInputDelimited_3.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
							csvReadertFileInputDelimited_3.setLineEnd("" + rowSeparator_tFileInputDelimited_3[0]);

						csvReadertFileInputDelimited_3.setQuoteChar('"');

						csvReadertFileInputDelimited_3.setEscapeChar(csvReadertFileInputDelimited_3.getQuoteChar());

						if (footer_tFileInputDelimited_3 > 0) {
							for (totalLinetFileInputDelimited_3 = 0; totalLinetFileInputDelimited_3 < 2; totalLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
							csvReadertFileInputDelimited_3.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_3.readNext()) {

								totalLinetFileInputDelimited_3++;

							}
							int lastLineTemptFileInputDelimited_3 = totalLinetFileInputDelimited_3
									- footer_tFileInputDelimited_3 < 0 ? 0
											: totalLinetFileInputDelimited_3 - footer_tFileInputDelimited_3;
							if (lastLinetFileInputDelimited_3 > 0) {
								lastLinetFileInputDelimited_3 = lastLinetFileInputDelimited_3 < lastLineTemptFileInputDelimited_3
										? lastLinetFileInputDelimited_3
										: lastLineTemptFileInputDelimited_3;
							} else {
								lastLinetFileInputDelimited_3 = lastLineTemptFileInputDelimited_3;
							}

							csvReadertFileInputDelimited_3.close();
							if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_3,
										fieldSeparator_tFileInputDelimited_3[0], "US-ASCII");
							} else {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_3)),
														"US-ASCII")),
										fieldSeparator_tFileInputDelimited_3[0]);
							}
							csvReadertFileInputDelimited_3.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
								csvReadertFileInputDelimited_3.setLineEnd("" + rowSeparator_tFileInputDelimited_3[0]);

							csvReadertFileInputDelimited_3.setQuoteChar('"');

							csvReadertFileInputDelimited_3.setEscapeChar(csvReadertFileInputDelimited_3.getQuoteChar());

						}

						if (limittFileInputDelimited_3 != 0) {
							for (currentLinetFileInputDelimited_3 = 0; currentLinetFileInputDelimited_3 < 2; currentLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
						}
						csvReadertFileInputDelimited_3.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_3 != 0 && csvReadertFileInputDelimited_3 != null
							&& csvReadertFileInputDelimited_3.readNext()) {
						rowstate_tFileInputDelimited_3.reset();

						rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3.getValues();

						currentLinetFileInputDelimited_3++;

						if (lastLinetFileInputDelimited_3 > -1
								&& currentLinetFileInputDelimited_3 > lastLinetFileInputDelimited_3) {
							break;
						}
						outputLinetFileInputDelimited_3++;
						if (limittFileInputDelimited_3 > 0
								&& outputLinetFileInputDelimited_3 > limittFileInputDelimited_3) {
							break;
						}

						row3 = null;

						row3 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row3 = new row3Struct();
						try {

							char fieldSeparator_tFileInputDelimited_3_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_3_ListType = ((String) ",").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_3.length == 1 && ("\015").equals(rowtFileInputDelimited_3[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								row3.BookingID = null;

								row3.ContactID = null;

								row3.CompanyName = null;

								row3.Name = null;

								row3.Surname = null;

								row3.Address1 = null;

								row3.Address2 = null;

								row3.Address3 = null;

								row3.Address4 = null;

								row3.Postcode = null;

								row3.Telephone = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_3 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_3 = 0;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.BookingID = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row3.BookingID = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 1;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.ContactID = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row3.ContactID = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 2;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.CompanyName = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row3.CompanyName = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 3;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Name = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row3.Name = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 4;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Surname = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row3.Surname = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 5;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Address1 = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row3.Address1 = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 6;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Address2 = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row3.Address2 = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 7;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Address3 = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row3.Address3 = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 8;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Address4 = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row3.Address4 = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 9;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Postcode = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row3.Postcode = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 10;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row3.Telephone = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row3.Telephone = null;

								}

							}

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row3 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */

						/**
						 * [tFileInputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_begin ] stop
						 */
// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tAdvancedXMLMapHash_row3 main ] start
							 */

							currentComponent = "tAdvancedXMLMapHash_row3";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
							}

							row3Struct row3_HashRow = new row3Struct();

							row3_HashRow.BookingID = row3.BookingID;

							row3_HashRow.ContactID = row3.ContactID;

							row3_HashRow.CompanyName = row3.CompanyName;

							row3_HashRow.Name = row3.Name;

							row3_HashRow.Surname = row3.Surname;

							row3_HashRow.Address1 = row3.Address1;

							row3_HashRow.Address2 = row3.Address2;

							row3_HashRow.Address3 = row3.Address3;

							row3_HashRow.Address4 = row3.Address4;

							row3_HashRow.Postcode = row3.Postcode;

							row3_HashRow.Telephone = row3.Telephone;

							tHash_Lookup_row3.put(row3_HashRow);

							tos_count_tAdvancedXMLMapHash_row3++;

							/**
							 * [tAdvancedXMLMapHash_row3 main ] stop
							 */

							/**
							 * [tAdvancedXMLMapHash_row3 process_data_begin ] start
							 */

							currentComponent = "tAdvancedXMLMapHash_row3";

							/**
							 * [tAdvancedXMLMapHash_row3 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedXMLMapHash_row3 process_data_end ] start
							 */

							currentComponent = "tAdvancedXMLMapHash_row3";

							/**
							 * [tAdvancedXMLMapHash_row3 process_data_end ] stop
							 */

						} // End of branch "row3"

						/**
						 * [tFileInputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						nb_line_tFileInputDelimited_3++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_3 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_3 != null) {
							csvReadertFileInputDelimited_3.close();
						}
					}
					if (csvReadertFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE", nb_line_tFileInputDelimited_3);
					}

				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tAdvancedXMLMapHash_row3 end ] start
				 */

				currentComponent = "tAdvancedXMLMapHash_row3";

				tHash_Lookup_row3.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tAdvancedXMLMapHash_row3", true);
				end_Hash.put("tAdvancedXMLMapHash_row3", System.currentTimeMillis());

				/**
				 * [tAdvancedXMLMapHash_row3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tAdvancedXMLMapHash_row3 finally ] start
				 */

				currentComponent = "tAdvancedXMLMapHash_row3";

				/**
				 * [tAdvancedXMLMapHash_row3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_FESTINEUCH_PROJECT_FestiNeuch = new byte[0];
		static byte[] commonByteArray_FESTINEUCH_PROJECT_FestiNeuch = new byte[0];

		public String status;

		public String getStatus() {
			return this.status;
		}

		public String origin_address;

		public String getOrigin_address() {
			return this.origin_address;
		}

		public String destination_address;

		public String getDestination_address() {
			return this.destination_address;
		}

		public String duration;

		public String getDuration() {
			return this.duration;
		}

		public String distance;

		public String getDistance() {
			return this.distance;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FESTINEUCH_PROJECT_FestiNeuch.length) {
					if (length < 1024 && commonByteArray_FESTINEUCH_PROJECT_FestiNeuch.length == 0) {
						commonByteArray_FESTINEUCH_PROJECT_FestiNeuch = new byte[1024];
					} else {
						commonByteArray_FESTINEUCH_PROJECT_FestiNeuch = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FESTINEUCH_PROJECT_FestiNeuch, 0, length);
				strReturn = new String(commonByteArray_FESTINEUCH_PROJECT_FestiNeuch, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FESTINEUCH_PROJECT_FestiNeuch) {

				try {

					int length = 0;

					this.status = readString(dis);

					this.origin_address = readString(dis);

					this.destination_address = readString(dis);

					this.duration = readString(dis);

					this.distance = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.status, dos);

				// String

				writeString(this.origin_address, dos);

				// String

				writeString(this.destination_address, dos);

				// String

				writeString(this.duration, dos);

				// String

				writeString(this.distance, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("status=" + status);
			sb.append(",origin_address=" + origin_address);
			sb.append(",destination_address=" + destination_address);
			sb.append(",duration=" + duration);
			sb.append(",distance=" + distance);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_FESTINEUCH_PROJECT_FestiNeuch = new byte[0];
		static byte[] commonByteArray_FESTINEUCH_PROJECT_FestiNeuch = new byte[0];

		public String status;

		public String getStatus() {
			return this.status;
		}

		public String origin_address;

		public String getOrigin_address() {
			return this.origin_address;
		}

		public String destination_address;

		public String getDestination_address() {
			return this.destination_address;
		}

		public String duration;

		public String getDuration() {
			return this.duration;
		}

		public String distance;

		public String getDistance() {
			return this.distance;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FESTINEUCH_PROJECT_FestiNeuch.length) {
					if (length < 1024 && commonByteArray_FESTINEUCH_PROJECT_FestiNeuch.length == 0) {
						commonByteArray_FESTINEUCH_PROJECT_FestiNeuch = new byte[1024];
					} else {
						commonByteArray_FESTINEUCH_PROJECT_FestiNeuch = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FESTINEUCH_PROJECT_FestiNeuch, 0, length);
				strReturn = new String(commonByteArray_FESTINEUCH_PROJECT_FestiNeuch, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FESTINEUCH_PROJECT_FestiNeuch) {

				try {

					int length = 0;

					this.status = readString(dis);

					this.origin_address = readString(dis);

					this.destination_address = readString(dis);

					this.duration = readString(dis);

					this.distance = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.status, dos);

				// String

				writeString(this.origin_address, dos);

				// String

				writeString(this.destination_address, dos);

				// String

				writeString(this.duration, dos);

				// String

				writeString(this.distance, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("status=" + status);
			sb.append(",origin_address=" + origin_address);
			sb.append(",destination_address=" + destination_address);
			sb.append(",duration=" + duration);
			sb.append(",distance=" + distance);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRESTClient_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRESTClient_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();
				row5Struct row5 = new row5Struct();

				/**
				 * [tAdvancedXMLMapHash_row5 begin ] start
				 */

				ok_Hash.put("tAdvancedXMLMapHash_row5", false);
				start_Hash.put("tAdvancedXMLMapHash_row5", System.currentTimeMillis());

				currentComponent = "tAdvancedXMLMapHash_row5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tAdvancedXMLMapHash_row5 = 0;

				// connection name:row5
				// source node:tExtractXMLField_1 - inputs:(row4) outputs:(row5,row5) | target
				// node:tAdvancedXMLMapHash_row5 - inputs:(row5) outputs:()
				// linked node: tXMLMap_4 - inputs:(row3,row5,benevoleposition)
				// outputs:(copyOfcopyOfSortieBenevole)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row5Struct>getLookup(matchingModeEnum_row5);

				globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);

				/**
				 * [tAdvancedXMLMapHash_row5 begin ] stop
				 */

				/**
				 * [tExtractXMLField_1 begin ] start
				 */

				ok_Hash.put("tExtractXMLField_1", false);
				start_Hash.put("tExtractXMLField_1", System.currentTimeMillis());

				currentComponent = "tExtractXMLField_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tExtractXMLField_1 = 0;

				int nb_line_tExtractXMLField_1 = 0;

				class NameSpaceTool_tExtractXMLField_1 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put("pre" + defualtNSPath.size(), ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
										path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
							countNSMap(e);
						}
					}

					/**
					 * the regex for the xpath like that : case 1 :
					 * functionA(locationXPathExpression) case 2 :
					 * fn:functionA(locationXPathExpression) case 3 :
					 * functionA(functionB(locationXPathExpression)) case 4 :
					 * fn:functionA(fn:functionB(locationXPathExpression)) and like that.
					 */
					private java.util.regex.Pattern simpleFunctionPattern;
					private StringBuffer stringBuffer;
					private java.util.Map<String, String> resultCache;

					public String addDefaultNSPrefix(final String xpathExpression, String loopPath) {
						if (defualtNSPath.size() < 1) {
							return xpathExpression;
						}

						if (resultCache == null) {
							resultCache = new java.util.HashMap<String, String>();
						}

						String resultXpathExpression = resultCache.get(xpathExpression);
						if (resultXpathExpression != null) {
							return resultXpathExpression;
						}

						String locationPathExpression = xpathExpression;

						if (simpleFunctionPattern == null) {
							simpleFunctionPattern = java.util.regex.Pattern
									.compile("([a-zA-z0-9]+:)?[a-zA-Z]+-?[A-Za-z]+\\(.*\\)");
						}

						boolean isSimpleFunctionXPath = simpleFunctionPattern.matcher(xpathExpression).matches();
						String tail = null;
						if (isSimpleFunctionXPath) {
							int start = xpathExpression.lastIndexOf('(');
							int end = xpathExpression.indexOf(')');
							if (start < end) {
								if (stringBuffer == null) {
									stringBuffer = new StringBuffer();
								}
								locationPathExpression = xpathExpression.substring(start + 1, end);
								stringBuffer.append(xpathExpression.substring(0, start + 1));
								tail = xpathExpression.substring(end);
							} else {
								isSimpleFunctionXPath = false;
							}
						}

						locationPathExpression = addDefaultNSPrefixForLocationXPathExpression(locationPathExpression,
								loopPath);

						resultXpathExpression = locationPathExpression;

						if (isSimpleFunctionXPath) {
							stringBuffer.append(locationPathExpression);
							stringBuffer.append(tail);
							resultXpathExpression = stringBuffer.toString();
							stringBuffer.setLength(0);
						}

						resultCache.put(xpathExpression, resultXpathExpression);
						return resultXpathExpression;
					}

					private String addDefaultNSPrefixForLocationXPathExpression(String path, String loopPath) {
						String fullPath = loopPath;
						if (!path.equals(fullPath)) {
							for (String tmp : path.split("/")) {
								if (("..").equals(tmp)) {
									fullPath = fullPath.substring(0, fullPath.lastIndexOf("/"));
								} else {
									fullPath += "/" + tmp;
								}
							}
						}
						int[] indexs = new int[fullPath.split("/").length - 1];
						java.util.Arrays.fill(indexs, -1);
						int length = 0;
						for (int i = 0; i < defualtNSPath.size(); i++) {
							if (defualtNSPath.get(i).length() > length && fullPath.startsWith(defualtNSPath.get(i))) {
								java.util.Arrays.fill(indexs, defualtNSPath.get(i).split("/").length - 2, indexs.length,
										i);
								length = defualtNSPath.get(i).length();
							}
						}

						StringBuilder newPath = new StringBuilder();
						String[] pathStrs = path.split("/");
						for (int i = 0; i < pathStrs.length; i++) {
							String tmp = pathStrs[i];
							if (newPath.length() > 0) {
								newPath.append("/");
							}
							if (tmp.length() > 0 && tmp.indexOf(":") == -1
									&& tmp.indexOf(".") == -1 /* && tmp.indexOf("@") == -1 */) {
								int index = indexs[i + indexs.length - pathStrs.length];
								if (index >= 0) {
									// ==== add by wliu to support both filter and functions==
									if (tmp.indexOf("[") > 0 && tmp.indexOf("]") > tmp.indexOf("[")) {// include filter
										String tmpStr = replaceElementWithNS(tmp, "pre" + index + ":");
										newPath.append(tmpStr);
									} else {
										if (tmp.indexOf("@") != -1 || tmp.indexOf("(") < tmp.indexOf(")")) { // include
																												// attribute
											newPath.append(tmp);
										} else {
											// ==add end=======
											newPath.append("pre").append(index).append(":").append(tmp);
										}
									}
								} else {
									newPath.append(tmp);
								}
							} else {
								newPath.append(tmp);
							}
						}
						return newPath.toString();
					}

					private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
					private java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(matches);

					private String replaceElementWithNS(String global, String pre) {

						java.util.regex.Matcher match = pattern.matcher(global);
						StringBuffer sb = new StringBuffer();
						match.reset();
						while (match.find()) {
							String group = match.group();
							String tmp = "";
							if (group.toLowerCase().matches("\\b(div|mod|and|or)\\b.*") || group.matches("@.*")) {
								tmp = group;
							} else {
								tmp = tmp + pre + group;
							}
							match.appendReplacement(sb, tmp);
						}
						match.appendTail(sb);

						return sb.toString();
					}

				}

				class XML_API_tExtractXMLField_1 {
					public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node).attribute("nil");
							if (attri != null && ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				XML_API_tExtractXMLField_1 xml_api_tExtractXMLField_1 = new XML_API_tExtractXMLField_1();

				/**
				 * [tExtractXMLField_1 begin ] stop
				 */

				/**
				 * [tRESTClient_1 begin ] start
				 */

				ok_Hash.put("tRESTClient_1", false);
				start_Hash.put("tRESTClient_1", System.currentTimeMillis());

				currentComponent = "tRESTClient_1";

				int tos_count_tRESTClient_1 = 0;

				/**
				 * [tRESTClient_1 begin ] stop
				 */

				/**
				 * [tRESTClient_1 main ] start
				 */

				currentComponent = "tRESTClient_1";

				row4 = null;

// expected response body
				Object responseDoc_tRESTClient_1 = null;

				try {
					// request body
					org.dom4j.Document requestDoc_tRESTClient_1 = null;
					String requestString_tRESTClient_1 = null;

					Object requestBody_tRESTClient_1 = requestDoc_tRESTClient_1 != null ? requestDoc_tRESTClient_1
							: requestString_tRESTClient_1;

					// resposne class name
					Class<?> responseClass_tRESTClient_1 = String.class;

					// create web client instance
					org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_1 = new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

					boolean inOSGi = routines.system.BundleUtils.inOSGi();

					final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_1 = new java.util.ArrayList<org.apache.cxf.feature.Feature>();

					String url = "https://maps.googleapis.com/maps/api/distancematrix";
					// {baseUri}tRESTClient
					factoryBean_tRESTClient_1.setServiceName(new javax.xml.namespace.QName(url, "tRESTClient"));
					factoryBean_tRESTClient_1.setAddress(url);

					factoryBean_tRESTClient_1.setFeatures(features_tRESTClient_1);

					java.util.List<Object> providers_tRESTClient_1 = new java.util.ArrayList<Object>();
					providers_tRESTClient_1.add(new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
						// workaround for https://jira.talendforge.org/browse/TESB-7276
						public org.dom4j.Document readFrom(Class<org.dom4j.Document> cls, java.lang.reflect.Type type,
								java.lang.annotation.Annotation[] anns, javax.ws.rs.core.MediaType mt,
								javax.ws.rs.core.MultivaluedMap<String, String> headers, java.io.InputStream is)
								throws IOException, javax.ws.rs.WebApplicationException {
							String contentLength = headers.getFirst("Content-Length");
							if (!org.apache.cxf.common.util.StringUtils.isEmpty(contentLength)
									&& Integer.valueOf(contentLength) <= 0) {
								try {
									return org.dom4j.DocumentHelper.parseText("<root/>");
								} catch (org.dom4j.DocumentException e_tRESTClient_1) {
									e_tRESTClient_1.printStackTrace();
								}
								return null;
							}
							return super.readFrom(cls, type, anns, mt, headers, is);
						}
					});
					org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_1 = new org.apache.cxf.jaxrs.provider.json.JSONProvider();
					jsonProvider_tRESTClient_1.setIgnoreNamespaces(true);
					jsonProvider_tRESTClient_1.setAttributesToElements(true);

					jsonProvider_tRESTClient_1.setSupportUnwrapped(true);
					jsonProvider_tRESTClient_1.setWrapperName("root");

					jsonProvider_tRESTClient_1.setDropRootElement(false);
					jsonProvider_tRESTClient_1.setConvertTypesToStrings(false);
					providers_tRESTClient_1.add(jsonProvider_tRESTClient_1);
					factoryBean_tRESTClient_1.setProviders(providers_tRESTClient_1);
					factoryBean_tRESTClient_1.setTransportId("http://cxf.apache.org/transports/http");

					boolean use_auth_tRESTClient_1 = false;

					org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_1 = factoryBean_tRESTClient_1
							.createWebClient();

					// set request path
					webClient_tRESTClient_1.path("xml");

					// set connection properties
					org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_1 = org.apache.cxf.jaxrs.client.WebClient
							.getConfig(webClient_tRESTClient_1);
					org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_1 = clientConfig_tRESTClient_1
							.getHttpConduit();

					if (clientConfig_tRESTClient_1.getEndpoint() != null
							&& clientConfig_tRESTClient_1.getEndpoint().getEndpointInfo() != null) {
						clientConfig_tRESTClient_1.getEndpoint().getEndpointInfo()
								.setProperty("enable.webclient.operation.reporting", true);
					}

					if (!inOSGi) {
						conduit_tRESTClient_1.getClient().setReceiveTimeout((long) (60 * 1000L));
						conduit_tRESTClient_1.getClient().setConnectionTimeout((long) (30 * 1000L));
						boolean use_proxy_tRESTClient_1 = false;

					}

					// set Accept-Type
					webClient_tRESTClient_1.accept("application/xml");

					// set optional query and header properties if any

					if (use_auth_tRESTClient_1 && "OAUTH2_BEARER".equals("BASIC")) {
						// set oAuth2 bearer token
						webClient_tRESTClient_1.header("Authorization", "Bearer " + "");
					}

					// if FORM request then capture query parameters into Form, otherwise set them
					// as queries

					webClient_tRESTClient_1.query("units", "imperial");

					webClient_tRESTClient_1.query("origins", "40.6655101,-73.89188969999998");

					webClient_tRESTClient_1.query("destinations",
							"40.6905615%2C-73.9976592%7C40.6905615%2C-73.9976592%7C40.6905615%2C-73.9976592%7C40.6905615%2C-73.9976592%7C40.6905615%2C-73.9976592%7C40.6905615%2C-73.9976592%7C40.659569%2C-73.933783%7C40.729029%2C-73.851524%7C40.6860072%2C-73.6334271%7C40.598566%2C-73.7527626%7C40.659569%2C-73.933783%7C40.729029%2C-73.851524%7C40.6860072%2C-73.6334271%7C40.598566%2C-73.7527626");

					webClient_tRESTClient_1.query("key", "AIzaSyCE8f9Oeld0Ae9vLWJyUH5SC9H8KGUI_V4");

					try {
						// start send request

						responseDoc_tRESTClient_1 = webClient_tRESTClient_1.get(responseClass_tRESTClient_1);

						int webClientResponseStatus_tRESTClient_1 = webClient_tRESTClient_1.getResponse().getStatus();
						if (webClientResponseStatus_tRESTClient_1 >= 300) {
							throw new javax.ws.rs.WebApplicationException(webClient_tRESTClient_1.getResponse());
						}

						if (row4 == null) {
							row4 = new row4Struct();
						}

						row4.statusCode = webClientResponseStatus_tRESTClient_1;

						{
							Object responseObj_tRESTClient_1 = responseDoc_tRESTClient_1;

							if (responseObj_tRESTClient_1 != null) {
								if (responseClass_tRESTClient_1 == String.class) {
									row4.string = (String) responseObj_tRESTClient_1;
								} else {
									routines.system.Document responseTalendDoc_tRESTClient_1 = null;
									if (null != responseObj_tRESTClient_1) {
										responseTalendDoc_tRESTClient_1 = new routines.system.Document();
										responseTalendDoc_tRESTClient_1
												.setDocument((org.dom4j.Document) responseObj_tRESTClient_1);
									}
									row4.body = responseTalendDoc_tRESTClient_1;
								}
							}
						}

						globalMap.put("tRESTClient_1_HEADERS", webClient_tRESTClient_1.getResponse().getHeaders());

					} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_1) {

						throw ex_tRESTClient_1;

					}

				} catch (Exception e_tRESTClient_1) {

					throw new TalendException(e_tRESTClient_1, currentComponent, globalMap);

				}

				tos_count_tRESTClient_1++;

				/**
				 * [tRESTClient_1 main ] stop
				 */

				/**
				 * [tRESTClient_1 process_data_begin ] start
				 */

				currentComponent = "tRESTClient_1";

				/**
				 * [tRESTClient_1 process_data_begin ] stop
				 */
// Start of branch "row4"
				if (row4 != null) {

					/**
					 * [tExtractXMLField_1 main ] start
					 */

					currentComponent = "tExtractXMLField_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
					}

					String xmlStr_tExtractXMLField_1 = null;
					routines.system.Document xmlDocument_tExtractXMLField_1 = null;
					if (row4.status != null) {
						xmlStr_tExtractXMLField_1 = row4.status;
					}
					if (xmlStr_tExtractXMLField_1 != null) {// C_01
						row5 = null;
						row5 = null;
						NameSpaceTool_tExtractXMLField_1 nsTool_tExtractXMLField_1 = new NameSpaceTool_tExtractXMLField_1();
						org.dom4j.io.SAXReader reader_tExtractXMLField_1 = new org.dom4j.io.SAXReader();

						org.dom4j.Document doc_tExtractXMLField_1 = null;
						java.util.HashMap xmlNameSpaceMap_tExtractXMLField_1 = null;
						org.dom4j.XPath x_tExtractXMLField_1 = null;
						java.util.List<org.dom4j.Node> nodeList_tExtractXMLField_1 = null;
						String loopQuery_tExtractXMLField_1 = "*";

						boolean isStructError_tExtractXMLField_1 = true;

						try {

							doc_tExtractXMLField_1 = reader_tExtractXMLField_1
									.read(new java.io.StringReader(xmlStr_tExtractXMLField_1));

							nsTool_tExtractXMLField_1.countNSMap(doc_tExtractXMLField_1.getRootElement());
							xmlNameSpaceMap_tExtractXMLField_1 = nsTool_tExtractXMLField_1.xmlNameSpaceMap;

							x_tExtractXMLField_1 = doc_tExtractXMLField_1.createXPath(nsTool_tExtractXMLField_1
									.addDefaultNSPrefix(loopQuery_tExtractXMLField_1, loopQuery_tExtractXMLField_1));

							x_tExtractXMLField_1.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

							nodeList_tExtractXMLField_1 = (java.util.List<org.dom4j.Node>) x_tExtractXMLField_1
									.selectNodes(doc_tExtractXMLField_1);

							isStructError_tExtractXMLField_1 = false;

						} catch (java.lang.Exception ex_tExtractXMLField_1) {
							System.err.println(ex_tExtractXMLField_1.getMessage());
						}

						org.dom4j.Node node_tExtractXMLField_1 = null;
						String str_tExtractXMLField_1 = "";
						boolean resultIsNode_tExtractXMLField_1 = true;
						for (int i_tExtractXMLField_1 = 0; isStructError_tExtractXMLField_1
								|| (nodeList_tExtractXMLField_1 != null
										&& i_tExtractXMLField_1 < nodeList_tExtractXMLField_1
												.size()); i_tExtractXMLField_1++) {

							if (!isStructError_tExtractXMLField_1) {
								row5 = null;
								row5 = null;
								row5 = new row5Struct();

								org.dom4j.Node temp_tExtractXMLField_1 = nodeList_tExtractXMLField_1
										.get(i_tExtractXMLField_1);

								nb_line_tExtractXMLField_1++;
								try {
									org.dom4j.XPath xTmp0_tExtractXMLField_1 = temp_tExtractXMLField_1
											.createXPath(nsTool_tExtractXMLField_1.addDefaultNSPrefix(
													"/DistanceMatrixResponse/status", loopQuery_tExtractXMLField_1));
									xTmp0_tExtractXMLField_1.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

									Object obj0_tExtractXMLField_1 = xTmp0_tExtractXMLField_1
											.evaluate(temp_tExtractXMLField_1);
									if (obj0_tExtractXMLField_1 instanceof String
											|| obj0_tExtractXMLField_1 instanceof Number) {
										resultIsNode_tExtractXMLField_1 = false;
										str_tExtractXMLField_1 = String.valueOf(obj0_tExtractXMLField_1);
									} else {
										resultIsNode_tExtractXMLField_1 = true;
										node_tExtractXMLField_1 = xTmp0_tExtractXMLField_1
												.selectSingleNode(temp_tExtractXMLField_1);
										str_tExtractXMLField_1 = xTmp0_tExtractXMLField_1
												.valueOf(temp_tExtractXMLField_1);
									}
									if (resultIsNode_tExtractXMLField_1
											&& xml_api_tExtractXMLField_1.isDefNull(node_tExtractXMLField_1)) {
										row5.status = null;
									} else if (resultIsNode_tExtractXMLField_1
											&& xml_api_tExtractXMLField_1.isEmpty(node_tExtractXMLField_1)) {
										row5.status = "";
									} else if (resultIsNode_tExtractXMLField_1
											&& xml_api_tExtractXMLField_1.isMissing(node_tExtractXMLField_1)) {
										row5.status = null;
									} else {
										row5.status = str_tExtractXMLField_1;
									}
									org.dom4j.XPath xTmp1_tExtractXMLField_1 = temp_tExtractXMLField_1
											.createXPath(nsTool_tExtractXMLField_1.addDefaultNSPrefix(
													"/DistanceMatrixResponse/origin_address",
													loopQuery_tExtractXMLField_1));
									xTmp1_tExtractXMLField_1.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

									Object obj1_tExtractXMLField_1 = xTmp1_tExtractXMLField_1
											.evaluate(temp_tExtractXMLField_1);
									if (obj1_tExtractXMLField_1 instanceof String
											|| obj1_tExtractXMLField_1 instanceof Number) {
										resultIsNode_tExtractXMLField_1 = false;
										str_tExtractXMLField_1 = String.valueOf(obj1_tExtractXMLField_1);
									} else {
										resultIsNode_tExtractXMLField_1 = true;
										node_tExtractXMLField_1 = xTmp1_tExtractXMLField_1
												.selectSingleNode(temp_tExtractXMLField_1);
										str_tExtractXMLField_1 = xTmp1_tExtractXMLField_1
												.valueOf(temp_tExtractXMLField_1);
									}
									if (resultIsNode_tExtractXMLField_1
											&& xml_api_tExtractXMLField_1.isDefNull(node_tExtractXMLField_1)) {
										row5.origin_address = null;
									} else if (resultIsNode_tExtractXMLField_1
											&& xml_api_tExtractXMLField_1.isEmpty(node_tExtractXMLField_1)) {
										row5.origin_address = "";
									} else if (resultIsNode_tExtractXMLField_1
											&& xml_api_tExtractXMLField_1.isMissing(node_tExtractXMLField_1)) {
										row5.origin_address = null;
									} else {
										row5.origin_address = str_tExtractXMLField_1;
									}
									org.dom4j.XPath xTmp2_tExtractXMLField_1 = temp_tExtractXMLField_1
											.createXPath(nsTool_tExtractXMLField_1.addDefaultNSPrefix(
													"/DistanceMatrixResponse/destination_address[1]",
													loopQuery_tExtractXMLField_1));
									xTmp2_tExtractXMLField_1.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

									Object obj2_tExtractXMLField_1 = xTmp2_tExtractXMLField_1
											.evaluate(temp_tExtractXMLField_1);
									if (obj2_tExtractXMLField_1 instanceof String
											|| obj2_tExtractXMLField_1 instanceof Number) {
										resultIsNode_tExtractXMLField_1 = false;
										str_tExtractXMLField_1 = String.valueOf(obj2_tExtractXMLField_1);
									} else {
										resultIsNode_tExtractXMLField_1 = true;
										node_tExtractXMLField_1 = xTmp2_tExtractXMLField_1
												.selectSingleNode(temp_tExtractXMLField_1);
										str_tExtractXMLField_1 = xTmp2_tExtractXMLField_1
												.valueOf(temp_tExtractXMLField_1);
									}
									if (resultIsNode_tExtractXMLField_1
											&& xml_api_tExtractXMLField_1.isDefNull(node_tExtractXMLField_1)) {
										row5.destination_address = null;
									} else if (resultIsNode_tExtractXMLField_1
											&& xml_api_tExtractXMLField_1.isEmpty(node_tExtractXMLField_1)) {
										row5.destination_address = "";
									} else if (resultIsNode_tExtractXMLField_1
											&& xml_api_tExtractXMLField_1.isMissing(node_tExtractXMLField_1)) {
										row5.destination_address = null;
									} else {
										row5.destination_address = str_tExtractXMLField_1;
									}
									org.dom4j.XPath xTmp3_tExtractXMLField_1 = temp_tExtractXMLField_1
											.createXPath(nsTool_tExtractXMLField_1.addDefaultNSPrefix(
													"/DistanceMatrixResponse/row/element[1]/duration/text",
													loopQuery_tExtractXMLField_1));
									xTmp3_tExtractXMLField_1.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

									Object obj3_tExtractXMLField_1 = xTmp3_tExtractXMLField_1
											.evaluate(temp_tExtractXMLField_1);
									if (obj3_tExtractXMLField_1 instanceof String
											|| obj3_tExtractXMLField_1 instanceof Number) {
										resultIsNode_tExtractXMLField_1 = false;
										str_tExtractXMLField_1 = String.valueOf(obj3_tExtractXMLField_1);
									} else {
										resultIsNode_tExtractXMLField_1 = true;
										node_tExtractXMLField_1 = xTmp3_tExtractXMLField_1
												.selectSingleNode(temp_tExtractXMLField_1);
										str_tExtractXMLField_1 = xTmp3_tExtractXMLField_1
												.valueOf(temp_tExtractXMLField_1);
									}
									if (resultIsNode_tExtractXMLField_1
											&& xml_api_tExtractXMLField_1.isDefNull(node_tExtractXMLField_1)) {
										row5.duration = null;
									} else if (resultIsNode_tExtractXMLField_1
											&& xml_api_tExtractXMLField_1.isEmpty(node_tExtractXMLField_1)) {
										row5.duration = "";
									} else if (resultIsNode_tExtractXMLField_1
											&& xml_api_tExtractXMLField_1.isMissing(node_tExtractXMLField_1)) {
										row5.duration = null;
									} else {
										row5.duration = str_tExtractXMLField_1;
									}
									org.dom4j.XPath xTmp4_tExtractXMLField_1 = temp_tExtractXMLField_1
											.createXPath(nsTool_tExtractXMLField_1.addDefaultNSPrefix(
													"/DistanceMatrixResponse/row/element[1]/distance/text",
													loopQuery_tExtractXMLField_1));
									xTmp4_tExtractXMLField_1.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

									Object obj4_tExtractXMLField_1 = xTmp4_tExtractXMLField_1
											.evaluate(temp_tExtractXMLField_1);
									if (obj4_tExtractXMLField_1 instanceof String
											|| obj4_tExtractXMLField_1 instanceof Number) {
										resultIsNode_tExtractXMLField_1 = false;
										str_tExtractXMLField_1 = String.valueOf(obj4_tExtractXMLField_1);
									} else {
										resultIsNode_tExtractXMLField_1 = true;
										node_tExtractXMLField_1 = xTmp4_tExtractXMLField_1
												.selectSingleNode(temp_tExtractXMLField_1);
										str_tExtractXMLField_1 = xTmp4_tExtractXMLField_1
												.valueOf(temp_tExtractXMLField_1);
									}
									if (resultIsNode_tExtractXMLField_1
											&& xml_api_tExtractXMLField_1.isDefNull(node_tExtractXMLField_1)) {
										row5.distance = null;
									} else if (resultIsNode_tExtractXMLField_1
											&& xml_api_tExtractXMLField_1.isEmpty(node_tExtractXMLField_1)) {
										row5.distance = "";
									} else if (resultIsNode_tExtractXMLField_1
											&& xml_api_tExtractXMLField_1.isMissing(node_tExtractXMLField_1)) {
										row5.distance = null;
									} else {
										row5.distance = str_tExtractXMLField_1;
									}
								} catch (java.lang.Exception ex_tExtractXMLField_1) {
									System.err.println(ex_tExtractXMLField_1.getMessage());
									row5 = null;
								}
							}

							isStructError_tExtractXMLField_1 = false;

							globalMap.put("tExtractXMLField_1_NB_LINE", nb_line_tExtractXMLField_1);

							tos_count_tExtractXMLField_1++;

							/**
							 * [tExtractXMLField_1 main ] stop
							 */

							/**
							 * [tExtractXMLField_1 process_data_begin ] start
							 */

							currentComponent = "tExtractXMLField_1";

							/**
							 * [tExtractXMLField_1 process_data_begin ] stop
							 */
// Start of branch "row5"
							if (row5 != null) {

								/**
								 * [tAdvancedXMLMapHash_row5 main ] start
								 */

								currentComponent = "tAdvancedXMLMapHash_row5";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
								}

								row5Struct row5_HashRow = new row5Struct();

								row5_HashRow.status = row5.status;

								row5_HashRow.origin_address = row5.origin_address;

								row5_HashRow.destination_address = row5.destination_address;

								row5_HashRow.duration = row5.duration;

								row5_HashRow.distance = row5.distance;

								tHash_Lookup_row5.put(row5_HashRow);

								tos_count_tAdvancedXMLMapHash_row5++;

								/**
								 * [tAdvancedXMLMapHash_row5 main ] stop
								 */

								/**
								 * [tAdvancedXMLMapHash_row5 process_data_begin ] start
								 */

								currentComponent = "tAdvancedXMLMapHash_row5";

								/**
								 * [tAdvancedXMLMapHash_row5 process_data_begin ] stop
								 */

								/**
								 * [tAdvancedXMLMapHash_row5 process_data_end ] start
								 */

								currentComponent = "tAdvancedXMLMapHash_row5";

								/**
								 * [tAdvancedXMLMapHash_row5 process_data_end ] stop
								 */

							} // End of branch "row5"

							// end for
						}

					} // C_01

					/**
					 * [tExtractXMLField_1 process_data_end ] start
					 */

					currentComponent = "tExtractXMLField_1";

					/**
					 * [tExtractXMLField_1 process_data_end ] stop
					 */

				} // End of branch "row4"

				/**
				 * [tRESTClient_1 process_data_end ] start
				 */

				currentComponent = "tRESTClient_1";

				/**
				 * [tRESTClient_1 process_data_end ] stop
				 */

				/**
				 * [tRESTClient_1 end ] start
				 */

				currentComponent = "tRESTClient_1";

				if (globalMap.get("tRESTClient_1_NB_LINE") == null) {
					globalMap.put("tRESTClient_1_NB_LINE", 1);
				}

// [tRESTCliend_end]

				ok_Hash.put("tRESTClient_1", true);
				end_Hash.put("tRESTClient_1", System.currentTimeMillis());

				/**
				 * [tRESTClient_1 end ] stop
				 */

				/**
				 * [tExtractXMLField_1 end ] start
				 */

				currentComponent = "tExtractXMLField_1";

				globalMap.put("tExtractXMLField_1_NB_LINE", nb_line_tExtractXMLField_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tExtractXMLField_1", true);
				end_Hash.put("tExtractXMLField_1", System.currentTimeMillis());

				/**
				 * [tExtractXMLField_1 end ] stop
				 */

				/**
				 * [tAdvancedXMLMapHash_row5 end ] start
				 */

				currentComponent = "tAdvancedXMLMapHash_row5";

				tHash_Lookup_row5.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tAdvancedXMLMapHash_row5", true);
				end_Hash.put("tAdvancedXMLMapHash_row5", System.currentTimeMillis());

				/**
				 * [tAdvancedXMLMapHash_row5 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRESTClient_1 finally ] start
				 */

				currentComponent = "tRESTClient_1";

				/**
				 * [tRESTClient_1 finally ] stop
				 */

				/**
				 * [tExtractXMLField_1 finally ] start
				 */

				currentComponent = "tExtractXMLField_1";

				/**
				 * [tExtractXMLField_1 finally ] stop
				 */

				/**
				 * [tAdvancedXMLMapHash_row5 finally ] start
				 */

				currentComponent = "tAdvancedXMLMapHash_row5";

				/**
				 * [tAdvancedXMLMapHash_row5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRESTClient_1_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfSortieBenevoleStruct
			implements routines.system.IPersistableRow<copyOfcopyOfSortieBenevoleStruct> {
		final static byte[] commonByteArrayLock_FESTINEUCH_PROJECT_FestiNeuch = new byte[0];
		static byte[] commonByteArray_FESTINEUCH_PROJECT_FestiNeuch = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FESTINEUCH_PROJECT_FestiNeuch) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfSortieBenevoleStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfSortieBenevoleStruct
			implements routines.system.IPersistableRow<copyOfSortieBenevoleStruct> {
		final static byte[] commonByteArrayLock_FESTINEUCH_PROJECT_FestiNeuch = new byte[0];
		static byte[] commonByteArray_FESTINEUCH_PROJECT_FestiNeuch = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FESTINEUCH_PROJECT_FestiNeuch) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfSortieBenevoleStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class SortieBenevoleStruct implements routines.system.IPersistableRow<SortieBenevoleStruct> {
		final static byte[] commonByteArrayLock_FESTINEUCH_PROJECT_FestiNeuch = new byte[0];
		static byte[] commonByteArray_FESTINEUCH_PROJECT_FestiNeuch = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FESTINEUCH_PROJECT_FestiNeuch) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(SortieBenevoleStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_FESTINEUCH_PROJECT_FestiNeuch = new byte[0];
		static byte[] commonByteArray_FESTINEUCH_PROJECT_FestiNeuch = new byte[0];

		public String BookingID;

		public String getBookingID() {
			return this.BookingID;
		}

		public String ContactID;

		public String getContactID() {
			return this.ContactID;
		}

		public String CompanyName;

		public String getCompanyName() {
			return this.CompanyName;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Surname;

		public String getSurname() {
			return this.Surname;
		}

		public String Address1;

		public String getAddress1() {
			return this.Address1;
		}

		public String Address2;

		public String getAddress2() {
			return this.Address2;
		}

		public String Address3;

		public String getAddress3() {
			return this.Address3;
		}

		public String Address4;

		public String getAddress4() {
			return this.Address4;
		}

		public String Postcode;

		public String getPostcode() {
			return this.Postcode;
		}

		public String Telephone;

		public String getTelephone() {
			return this.Telephone;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FESTINEUCH_PROJECT_FestiNeuch.length) {
					if (length < 1024 && commonByteArray_FESTINEUCH_PROJECT_FestiNeuch.length == 0) {
						commonByteArray_FESTINEUCH_PROJECT_FestiNeuch = new byte[1024];
					} else {
						commonByteArray_FESTINEUCH_PROJECT_FestiNeuch = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FESTINEUCH_PROJECT_FestiNeuch, 0, length);
				strReturn = new String(commonByteArray_FESTINEUCH_PROJECT_FestiNeuch, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FESTINEUCH_PROJECT_FestiNeuch) {

				try {

					int length = 0;

					this.BookingID = readString(dis);

					this.ContactID = readString(dis);

					this.CompanyName = readString(dis);

					this.Name = readString(dis);

					this.Surname = readString(dis);

					this.Address1 = readString(dis);

					this.Address2 = readString(dis);

					this.Address3 = readString(dis);

					this.Address4 = readString(dis);

					this.Postcode = readString(dis);

					this.Telephone = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.BookingID, dos);

				// String

				writeString(this.ContactID, dos);

				// String

				writeString(this.CompanyName, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Surname, dos);

				// String

				writeString(this.Address1, dos);

				// String

				writeString(this.Address2, dos);

				// String

				writeString(this.Address3, dos);

				// String

				writeString(this.Address4, dos);

				// String

				writeString(this.Postcode, dos);

				// String

				writeString(this.Telephone, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("BookingID=" + BookingID);
			sb.append(",ContactID=" + ContactID);
			sb.append(",CompanyName=" + CompanyName);
			sb.append(",Name=" + Name);
			sb.append(",Surname=" + Surname);
			sb.append(",Address1=" + Address1);
			sb.append(",Address2=" + Address2);
			sb.append(",Address3=" + Address3);
			sb.append(",Address4=" + Address4);
			sb.append(",Postcode=" + Postcode);
			sb.append(",Telephone=" + Telephone);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ReponseStruct implements routines.system.IPersistableRow<ReponseStruct> {
		final static byte[] commonByteArrayLock_FESTINEUCH_PROJECT_FestiNeuch = new byte[0];
		static byte[] commonByteArray_FESTINEUCH_PROJECT_FestiNeuch = new byte[0];

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FESTINEUCH_PROJECT_FestiNeuch) {

				try {

					int length = 0;

					this.body = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.body);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("body=" + String.valueOf(body));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ReponseStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class RequeteStruct implements routines.system.IPersistableRow<RequeteStruct> {
		final static byte[] commonByteArrayLock_FESTINEUCH_PROJECT_FestiNeuch = new byte[0];
		static byte[] commonByteArray_FESTINEUCH_PROJECT_FestiNeuch = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FESTINEUCH_PROJECT_FestiNeuch) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(RequeteStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class benevolesrequestStruct implements routines.system.IPersistableRow<benevolesrequestStruct> {
		final static byte[] commonByteArrayLock_FESTINEUCH_PROJECT_FestiNeuch = new byte[0];
		static byte[] commonByteArray_FESTINEUCH_PROJECT_FestiNeuch = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FESTINEUCH_PROJECT_FestiNeuch) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(benevolesrequestStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class benevolerequestStruct implements routines.system.IPersistableRow<benevolerequestStruct> {
		final static byte[] commonByteArrayLock_FESTINEUCH_PROJECT_FestiNeuch = new byte[0];
		static byte[] commonByteArray_FESTINEUCH_PROJECT_FestiNeuch = new byte[0];

		public String BookingID;

		public String getBookingID() {
			return this.BookingID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FESTINEUCH_PROJECT_FestiNeuch.length) {
					if (length < 1024 && commonByteArray_FESTINEUCH_PROJECT_FestiNeuch.length == 0) {
						commonByteArray_FESTINEUCH_PROJECT_FestiNeuch = new byte[1024];
					} else {
						commonByteArray_FESTINEUCH_PROJECT_FestiNeuch = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FESTINEUCH_PROJECT_FestiNeuch, 0, length);
				strReturn = new String(commonByteArray_FESTINEUCH_PROJECT_FestiNeuch, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FESTINEUCH_PROJECT_FestiNeuch) {

				try {

					int length = 0;

					this.BookingID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.BookingID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("BookingID=" + BookingID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(benevolerequestStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class benevolepositionStruct implements routines.system.IPersistableRow<benevolepositionStruct> {
		final static byte[] commonByteArrayLock_FESTINEUCH_PROJECT_FestiNeuch = new byte[0];
		static byte[] commonByteArray_FESTINEUCH_PROJECT_FestiNeuch = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FESTINEUCH_PROJECT_FestiNeuch) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(benevolepositionStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tRESTRequest_1Struct
			implements routines.system.IPersistableRow<after_tRESTRequest_1Struct> {
		final static byte[] commonByteArrayLock_FESTINEUCH_PROJECT_FestiNeuch = new byte[0];
		static byte[] commonByteArray_FESTINEUCH_PROJECT_FestiNeuch = new byte[0];

		public String uri;

		public String getUri() {
			return this.uri;
		}

		public String method;

		public String getMethod() {
			return this.method;
		}

		public Integer status;

		public Integer getStatus() {
			return this.status;
		}

		public String error;

		public String getError() {
			return this.error;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FESTINEUCH_PROJECT_FestiNeuch.length) {
					if (length < 1024 && commonByteArray_FESTINEUCH_PROJECT_FestiNeuch.length == 0) {
						commonByteArray_FESTINEUCH_PROJECT_FestiNeuch = new byte[1024];
					} else {
						commonByteArray_FESTINEUCH_PROJECT_FestiNeuch = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FESTINEUCH_PROJECT_FestiNeuch, 0, length);
				strReturn = new String(commonByteArray_FESTINEUCH_PROJECT_FestiNeuch, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FESTINEUCH_PROJECT_FestiNeuch) {

				try {

					int length = 0;

					this.uri = readString(dis);

					this.method = readString(dis);

					this.status = readInteger(dis);

					this.error = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.uri, dos);

				// String

				writeString(this.method, dos);

				// Integer

				writeInteger(this.status, dos);

				// String

				writeString(this.error, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("uri=" + uri);
			sb.append(",method=" + method);
			sb.append(",status=" + String.valueOf(status));
			sb.append(",error=" + error);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tRESTRequest_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRESTRequest_1_LoopProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRESTRequest_1_Loop_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tRESTClient_1Process(globalMap);
				tFileInputDelimited_3Process(globalMap);
				tFileInputDelimited_2Process(globalMap);

				RequeteStruct Requete = new RequeteStruct();
				ReponseStruct Reponse = new ReponseStruct();
				benevolesrequestStruct benevolesrequest = new benevolesrequestStruct();
				row1Struct row1 = new row1Struct();
				SortieBenevoleStruct SortieBenevole = new SortieBenevoleStruct();
				benevolerequestStruct benevolerequest = new benevolerequestStruct();
				copyOfSortieBenevoleStruct copyOfSortieBenevole = new copyOfSortieBenevoleStruct();
				benevolepositionStruct benevoleposition = new benevolepositionStruct();
				copyOfcopyOfSortieBenevoleStruct copyOfcopyOfSortieBenevole = new copyOfcopyOfSortieBenevoleStruct();

				/**
				 * [tRESTRequest_1_Loop begin ] start
				 */

				int NB_ITERATE_tRESTRequest_1_In = 0; // for statistics

				ok_Hash.put("tRESTRequest_1_Loop", false);
				start_Hash.put("tRESTRequest_1_Loop", System.currentTimeMillis());

				currentVirtualComponent = "tRESTRequest_1";

				currentComponent = "tRESTRequest_1_Loop";

				int tos_count_tRESTRequest_1_Loop = 0;

				if (execStat) {
					runStat.updateStatOnConnection(iterateId, 0, 0, "Requete", "Reponse", "benevolesrequest",
							"benevolerequest", "copyOfSortieBenevole", "benevoleposition",
							"copyOfcopyOfSortieBenevole");
				}

				benevoleposition = null;

				benevolerequest = null;

				benevolesrequest = null;

				Requete = null;

				int nb_line_tRESTRequest_1 = 0;

				try {

					java.util.Map<String, Object> requestMessage_tRESTRequest_1 = (java.util.Map<String, Object>) globalMap
							.get("restRequest");

					restEndpoint = getRestEndpoint();

					if (null == requestMessage_tRESTRequest_1) {

						if (restTalendJobAlreadyStarted) {
							throw new RuntimeException("request is not provided");
						} else {
							if (!runInTalendEsbRuntimeContainer && null == thread4RestServiceProviderEndpoint) {
								String endpointUrl_tRESTRequest_1 = checkEndpointUrl(restEndpoint);
								// *** external thread for endpoint initialization
								thread4RestServiceProviderEndpoint = new Thread4RestServiceProviderEndpoint(this,
										endpointUrl_tRESTRequest_1);
								thread4RestServiceProviderEndpoint.start();
								// *** external thread for endpoint initialization
							}

							restTalendJobAlreadyStarted = true;

							if (runInDaemonMode) {
								Thread.currentThread();
								try {
									while (true) {
										Thread.sleep(60000);
									}
								} catch (InterruptedException e_tRESTRequest_1) {
									// e_tRESTRequest_1.printStackTrace();
									// throw new TalendException(e_tRESTRequest_1, "wholeJob", globalMap);
								}
							}
						}
						return;
					}

					requestMessage_tRESTRequest_1.put("CURRENT_MESSAGE",
							org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage());

					Object ctx_tRESTRequest_1 = requestMessage_tRESTRequest_1.get("MESSAGE_CONTEXT");
					if (ctx_tRESTRequest_1 != null
							&& ctx_tRESTRequest_1 instanceof org.apache.cxf.jaxrs.impl.tl.ThreadLocalMessageContext) {
						requestMessage_tRESTRequest_1.put("MESSAGE_CONTEXT",
								((org.apache.cxf.jaxrs.impl.tl.ThreadLocalMessageContext) ctx_tRESTRequest_1).get());
					}

					/**
					 * [tRESTRequest_1_Loop begin ] stop
					 */

					/**
					 * [tRESTRequest_1_Loop main ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_Loop";

					resourceMap.put("inIterateVComp", true);

					tos_count_tRESTRequest_1_Loop++;

					/**
					 * [tRESTRequest_1_Loop main ] stop
					 */

					/**
					 * [tRESTRequest_1_Loop process_data_begin ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_Loop";

					/**
					 * [tRESTRequest_1_Loop process_data_begin ] stop
					 */
					NB_ITERATE_tRESTRequest_1_In++;

					if (execStat) {
						runStat.updateStatOnConnection("Iterate", 1, "exec" + NB_ITERATE_tRESTRequest_1_In);
						// Thread.sleep(1000);
					}

					/**
					 * [tRESTResponse_1 begin ] start
					 */

					ok_Hash.put("tRESTResponse_1", false);
					start_Hash.put("tRESTResponse_1", System.currentTimeMillis());

					currentComponent = "tRESTResponse_1";

					if (execStat) {
						runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "Reponse");
					}

					int tos_count_tRESTResponse_1 = 0;

					/**
					 * [tRESTResponse_1 begin ] stop
					 */

					/**
					 * [tXMLMap_1 begin ] start
					 */

					ok_Hash.put("tXMLMap_1", false);
					start_Hash.put("tXMLMap_1", System.currentTimeMillis());

					currentComponent = "tXMLMap_1";

					if (execStat) {
						runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "Requete");
					}

					int tos_count_tXMLMap_1 = 0;

//===============================input xml init part===============================
					class XML_API_tXMLMap_1 {
						public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
							if (node != null && node instanceof org.dom4j.Element) {
								org.dom4j.Attribute attri = ((org.dom4j.Element) node).attribute("nil");
								if (attri != null && ("true").equals(attri.getText())) {
									return true;
								}
							}
							return false;
						}

						public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
							return node == null ? true : false;
						}

						public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
							if (node != null) {
								return node.getText().length() == 0;
							}
							return false;
						}
					}
					class Var__tXMLMap_1__Struct {
					}
					Var__tXMLMap_1__Struct Var__tXMLMap_1 = new Var__tXMLMap_1__Struct();
// ###############################
// # Outputs initialization
					ReponseStruct Reponse_tmp = new ReponseStruct();
					ReponseStruct Reponse_save = null;
// ###############################
					int nb_line_tXMLMap_1 = 0;

					XML_API_tXMLMap_1 xml_api_tXMLMap_1 = new XML_API_tXMLMap_1();

					class GenerateDocument_Reponse {

						java.util.Map<String, Object> valueMap = null;

						routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(
								1);

						org.dom4j.Document doc = null;

						org.dom4j.Element root4Group = null;

						org.dom4j.io.OutputFormat format = null;

						java.util.List<java.util.List<String>> groupbyList = null;
						java.util.List<org.dom4j.Element> groupElementList = null;
						int order = 0;

						boolean isFirst = true;

						boolean needRoot = true;

						String currentValue = null;

						public GenerateDocument_Reponse() {
//    	this.treeNodeAPI = treeNodeAPI;

							valueMap = new java.util.HashMap<String, Object>();

							groupbyList = new java.util.ArrayList<java.util.List<String>>();
							groupElementList = new java.util.ArrayList<org.dom4j.Element>();

							doc = org.dom4j.DocumentHelper.createDocument();
							format = org.dom4j.io.OutputFormat.createPrettyPrint();
							format.setTrimText(false);
						}

						public org.dom4j.Document getDocument() {
							generateOk();
							return this.doc;
						}

						// do some work after document has been generated
						private void generateOk() {
							routines.system.NestXMLTool.replaceDefaultNameSpace(this.doc.getRootElement(), null);
						}

						// We generate the TreeNode_API object only if there is a document in the main
						// input table.
						void generateElements(boolean isInnerJoin, RequeteStruct Requete, Var__tXMLMap_1__Struct Var) {

							/*
							 * if(this.treeNodeAPI==null) { this.treeNodeAPI = treeNodeAPI; }
							 */

							org.dom4j.Element subTreeRootParent = null;
// build root xml tree 
							if (needRoot) {
								needRoot = false;
								org.dom4j.Element root = null;
								root = org.dom4j.DocumentHelper.createElement("root");
								doc.add(root);
								subTreeRootParent = root;
								org.dom4j.Element root_0 = null;
								root_0 = root.addElement("reponse");
								valueMap.put("root_0", "Hello World");
								if (valueMap.get("root_0") != null) {
									routines.system.NestXMLTool.setText(root_0,
											FormatterUtils.fm(valueMap.get("root_0"), null));
								}
								root4Group = subTreeRootParent;
							} else {
								subTreeRootParent = root4Group;
							}
							/* build group xml tree */
							boolean isNewElement = false;
							isNewElement = false;
						}
					}

					/**
					 * [tXMLMap_1 begin ] stop
					 */

					/**
					 * [tFlowToIterate_1 begin ] start
					 */

					int NB_ITERATE_tFileInputDelimited_1 = 0; // for statistics

					ok_Hash.put("tFlowToIterate_1", false);
					start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

					currentComponent = "tFlowToIterate_1";

					if (execStat) {
						runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "benevolesrequest");
					}

					int tos_count_tFlowToIterate_1 = 0;

					int nb_line_tFlowToIterate_1 = 0;
					int counter_tFlowToIterate_1 = 0;

					/**
					 * [tFlowToIterate_1 begin ] stop
					 */

					/**
					 * [tXMLMap_3_TXMLMAP_OUT begin ] start
					 */

					ok_Hash.put("tXMLMap_3_TXMLMAP_OUT", false);
					start_Hash.put("tXMLMap_3_TXMLMAP_OUT", System.currentTimeMillis());

					currentVirtualComponent = "tXMLMap_3";

					currentComponent = "tXMLMap_3_TXMLMAP_OUT";

					if (execStat) {
						runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "benevolerequest");
					}

					int tos_count_tXMLMap_3_TXMLMAP_OUT = 0;

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
							.get("tHash_Lookup_row2"));

					row2Struct row2HashKey = new row2Struct();
					row2Struct row2Default = new row2Struct();
					row2Struct row2 = new row2Struct();

//===============================input xml init part===============================
					class XML_API_tXMLMap_3_TXMLMAP_OUT {
						public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
							if (node != null && node instanceof org.dom4j.Element) {
								org.dom4j.Attribute attri = ((org.dom4j.Element) node).attribute("nil");
								if (attri != null && ("true").equals(attri.getText())) {
									return true;
								}
							}
							return false;
						}

						public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
							return node == null ? true : false;
						}

						public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
							if (node != null) {
								return node.getText().length() == 0;
							}
							return false;
						}
					}
					class Var__tXMLMap_3_TXMLMAP_OUT__Struct {
					}
					Var__tXMLMap_3_TXMLMAP_OUT__Struct Var__tXMLMap_3_TXMLMAP_OUT = new Var__tXMLMap_3_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
					copyOfSortieBenevoleStruct copyOfSortieBenevole_tmp = new copyOfSortieBenevoleStruct();
					copyOfSortieBenevoleStruct copyOfSortieBenevole_save = null;
//the aggregate variable
					copyOfSortieBenevoleStruct copyOfSortieBenevole_aggregate = null;
//init the resultset for aggregate
					java.util.List<Object> allOutsForAggregate_tXMLMap_3 = new java.util.ArrayList<Object>();
					globalMap.put("allOutsForAggregate_tXMLMap_3", allOutsForAggregate_tXMLMap_3);
// ###############################
					int nb_line_tXMLMap_3_TXMLMAP_OUT = 0;

					XML_API_tXMLMap_3_TXMLMAP_OUT xml_api_tXMLMap_3_TXMLMAP_OUT = new XML_API_tXMLMap_3_TXMLMAP_OUT();

					// the map store the previous value of aggregate columns
					java.util.Map<String, Object> aggregateCacheMap_tXMLMap_3_TXMLMAP_OUT = new java.util.HashMap<String, Object>();

					class GenerateDocument_copyOfSortieBenevole {

						java.util.Map<String, Object> valueMap = null;

						routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(
								1);

						org.dom4j.Document doc = null;

						org.dom4j.Element root4Group = null;

						org.dom4j.io.OutputFormat format = null;

						java.util.List<java.util.List<String>> groupbyList = null;
						java.util.List<org.dom4j.Element> groupElementList = null;
						int order = 0;

						boolean isFirst = true;

						boolean needRoot = true;

						String currentValue = null;

						org.dom4j.Element subTreeLoopParent0 = null;
						public boolean subTreeLoop0 = false;

						public GenerateDocument_copyOfSortieBenevole() {
//    	this.treeNodeAPI = treeNodeAPI;

							valueMap = new java.util.HashMap<String, Object>();

							groupbyList = new java.util.ArrayList<java.util.List<String>>();
							groupElementList = new java.util.ArrayList<org.dom4j.Element>();

							doc = org.dom4j.DocumentHelper.createDocument();
							format = org.dom4j.io.OutputFormat.createPrettyPrint();
							format.setTrimText(false);
						}

						public org.dom4j.Document getDocument() {
							return this.doc;
						}

						// We generate the TreeNode_API object only if there is a document in the main
						// input table.
						void generateElements(boolean isInnerJoin, benevolerequestStruct benevolerequest,
								row2Struct row2, Var__tXMLMap_3_TXMLMAP_OUT__Struct Var) {

							/*
							 * if(this.treeNodeAPI==null) { this.treeNodeAPI = treeNodeAPI; }
							 */

							org.dom4j.Element subTreeRootParent = null;
// build root xml tree 
							if (needRoot) {
								needRoot = false;
								org.dom4j.Element root = null;
								root = doc.addElement("root");
								subTreeRootParent = root;
								org.dom4j.Element root_0 = null;
								root_0 = root.addElement("benevoles");
								subTreeRootParent = root_0;
								subTreeLoopParent0 = root_0;
								root4Group = subTreeRootParent;
							} else {
								subTreeRootParent = root4Group;
							}
							/* build group xml tree */
							boolean isNewElement = false;
							isNewElement = false;
							org.dom4j.Element loop = null;
							loop = org.dom4j.DocumentHelper.createElement("benevole");
							subTreeRootParent.elements().add(orderHelper.getInsertLocation(0, 0), loop);
							subTreeRootParent = loop;
							org.dom4j.Element loop_1 = null;
							loop_1 = loop.addElement("BookingID");
							valueMap.put("loop_1", row2.BookingID);
							if (valueMap.get("loop_1") != null) {
								routines.system.NestXMLTool.setText(loop_1,
										FormatterUtils.fm(valueMap.get("loop_1"), null));
							}
							org.dom4j.Element loop_2 = null;
							loop_2 = loop.addElement("ContactID");
							valueMap.put("loop_2", row2.ContactID);
							if (valueMap.get("loop_2") != null) {
								routines.system.NestXMLTool.setText(loop_2,
										FormatterUtils.fm(valueMap.get("loop_2"), null));
							}
							org.dom4j.Element loop_3 = null;
							loop_3 = loop.addElement("CompanyName");
							valueMap.put("loop_3", row2.CompanyName);
							if (valueMap.get("loop_3") != null) {
								routines.system.NestXMLTool.setText(loop_3,
										FormatterUtils.fm(valueMap.get("loop_3"), null));
							}
							org.dom4j.Element loop_4 = null;
							loop_4 = loop.addElement("Name");
							valueMap.put("loop_4", row2.Name);
							if (valueMap.get("loop_4") != null) {
								routines.system.NestXMLTool.setText(loop_4,
										FormatterUtils.fm(valueMap.get("loop_4"), null));
							}
							org.dom4j.Element loop_5 = null;
							loop_5 = loop.addElement("Surname");
							valueMap.put("loop_5", row2.Surname);
							if (valueMap.get("loop_5") != null) {
								routines.system.NestXMLTool.setText(loop_5,
										FormatterUtils.fm(valueMap.get("loop_5"), null));
							}
							org.dom4j.Element loop_6 = null;
							loop_6 = loop.addElement("Address1");
							valueMap.put("loop_6", row2.Address1);
							if (valueMap.get("loop_6") != null) {
								routines.system.NestXMLTool.setText(loop_6,
										FormatterUtils.fm(valueMap.get("loop_6"), null));
							}
							org.dom4j.Element loop_7 = null;
							loop_7 = loop.addElement("Address2");
							valueMap.put("loop_7", row2.Address2);
							if (valueMap.get("loop_7") != null) {
								routines.system.NestXMLTool.setText(loop_7,
										FormatterUtils.fm(valueMap.get("loop_7"), null));
							}
							org.dom4j.Element loop_8 = null;
							loop_8 = loop.addElement("Address3");
							valueMap.put("loop_8", row2.Address3);
							if (valueMap.get("loop_8") != null) {
								routines.system.NestXMLTool.setText(loop_8,
										FormatterUtils.fm(valueMap.get("loop_8"), null));
							}
							org.dom4j.Element loop_9 = null;
							loop_9 = loop.addElement("Address4");
							valueMap.put("loop_9", row2.Address4);
							if (valueMap.get("loop_9") != null) {
								routines.system.NestXMLTool.setText(loop_9,
										FormatterUtils.fm(valueMap.get("loop_9"), null));
							}
							org.dom4j.Element loop_10 = null;
							loop_10 = loop.addElement("Postcode");
							valueMap.put("loop_10", row2.Postcode);
							if (valueMap.get("loop_10") != null) {
								routines.system.NestXMLTool.setText(loop_10,
										FormatterUtils.fm(valueMap.get("loop_10"), null));
							}
							org.dom4j.Element loop_11 = null;
							loop_11 = loop.addElement("Telephone");
							valueMap.put("loop_11", row2.Telephone);
							if (valueMap.get("loop_11") != null) {
								routines.system.NestXMLTool.setText(loop_11,
										FormatterUtils.fm(valueMap.get("loop_11"), null));
							}
						}
					}

					GenerateDocument_copyOfSortieBenevole gen_Doc_copyOfSortieBenevole_tXMLMap_3_TXMLMAP_OUT = new GenerateDocument_copyOfSortieBenevole();
					boolean docAlreadyInstanciate_copyOfSortieBenevole = false;

					/**
					 * [tXMLMap_3_TXMLMAP_OUT begin ] stop
					 */

					/**
					 * [tXMLMap_4_TXMLMAP_OUT begin ] start
					 */

					ok_Hash.put("tXMLMap_4_TXMLMAP_OUT", false);
					start_Hash.put("tXMLMap_4_TXMLMAP_OUT", System.currentTimeMillis());

					currentVirtualComponent = "tXMLMap_4";

					currentComponent = "tXMLMap_4_TXMLMAP_OUT";

					if (execStat) {
						runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "benevoleposition");
					}

					int tos_count_tXMLMap_4_TXMLMAP_OUT = 0;

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) globalMap
							.get("tHash_Lookup_row3"));

					row3Struct row3HashKey = new row3Struct();
					row3Struct row3Default = new row3Struct();
					row3Struct row3 = new row3Struct();

					org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) globalMap
							.get("tHash_Lookup_row5"));

					tHash_Lookup_row5.initGet();

					row5Struct row5HashKey = new row5Struct();
					row5Struct row5Default = new row5Struct();
					row5Struct row5 = new row5Struct();

//===============================input xml init part===============================
					class XML_API_tXMLMap_4_TXMLMAP_OUT {
						public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
							if (node != null && node instanceof org.dom4j.Element) {
								org.dom4j.Attribute attri = ((org.dom4j.Element) node).attribute("nil");
								if (attri != null && ("true").equals(attri.getText())) {
									return true;
								}
							}
							return false;
						}

						public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
							return node == null ? true : false;
						}

						public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
							if (node != null) {
								return node.getText().length() == 0;
							}
							return false;
						}
					}
					class Var__tXMLMap_4_TXMLMAP_OUT__Struct {
					}
					Var__tXMLMap_4_TXMLMAP_OUT__Struct Var__tXMLMap_4_TXMLMAP_OUT = new Var__tXMLMap_4_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
					copyOfcopyOfSortieBenevoleStruct copyOfcopyOfSortieBenevole_tmp = new copyOfcopyOfSortieBenevoleStruct();
					copyOfcopyOfSortieBenevoleStruct copyOfcopyOfSortieBenevole_save = null;
//the aggregate variable
					copyOfcopyOfSortieBenevoleStruct copyOfcopyOfSortieBenevole_aggregate = null;
//init the resultset for aggregate
					java.util.List<Object> allOutsForAggregate_tXMLMap_4 = new java.util.ArrayList<Object>();
					globalMap.put("allOutsForAggregate_tXMLMap_4", allOutsForAggregate_tXMLMap_4);
// ###############################
					int nb_line_tXMLMap_4_TXMLMAP_OUT = 0;

					XML_API_tXMLMap_4_TXMLMAP_OUT xml_api_tXMLMap_4_TXMLMAP_OUT = new XML_API_tXMLMap_4_TXMLMAP_OUT();

					// the map store the previous value of aggregate columns
					java.util.Map<String, Object> aggregateCacheMap_tXMLMap_4_TXMLMAP_OUT = new java.util.HashMap<String, Object>();

					class GenerateDocument_copyOfcopyOfSortieBenevole {

						java.util.Map<String, Object> valueMap = null;

						routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(
								1);

						org.dom4j.Document doc = null;

						org.dom4j.Element root4Group = null;

						org.dom4j.io.OutputFormat format = null;

						java.util.List<java.util.List<String>> groupbyList = null;
						java.util.List<org.dom4j.Element> groupElementList = null;
						int order = 0;

						boolean isFirst = true;

						boolean needRoot = true;

						String currentValue = null;

						org.dom4j.Element subTreeLoopParent0 = null;
						public boolean subTreeLoop0 = false;

						public GenerateDocument_copyOfcopyOfSortieBenevole() {
//    	this.treeNodeAPI = treeNodeAPI;

							valueMap = new java.util.HashMap<String, Object>();

							groupbyList = new java.util.ArrayList<java.util.List<String>>();
							groupElementList = new java.util.ArrayList<org.dom4j.Element>();

							doc = org.dom4j.DocumentHelper.createDocument();
							format = org.dom4j.io.OutputFormat.createPrettyPrint();
							format.setTrimText(false);
						}

						public org.dom4j.Document getDocument() {
							return this.doc;
						}

						// We generate the TreeNode_API object only if there is a document in the main
						// input table.
						void generateElements(boolean isInnerJoin, benevolepositionStruct benevoleposition,
								row3Struct row3, row5Struct row5, Var__tXMLMap_4_TXMLMAP_OUT__Struct Var) {

							/*
							 * if(this.treeNodeAPI==null) { this.treeNodeAPI = treeNodeAPI; }
							 */

							org.dom4j.Element subTreeRootParent = null;
// build root xml tree 
							if (needRoot) {
								needRoot = false;
								org.dom4j.Element root = null;
								root = doc.addElement("root");
								subTreeRootParent = root;
								org.dom4j.Element root_0 = null;
								root_0 = root.addElement("benevoles");
								subTreeRootParent = root_0;
								subTreeLoopParent0 = root_0;
								root4Group = subTreeRootParent;
							} else {
								subTreeRootParent = root4Group;
							}
							/* build group xml tree */
							boolean isNewElement = false;
							isNewElement = false;
							org.dom4j.Element loop = null;
							loop = org.dom4j.DocumentHelper.createElement("benevole");
							subTreeRootParent.elements().add(orderHelper.getInsertLocation(0, 0), loop);
							subTreeRootParent = loop;
							org.dom4j.Element loop_1 = null;
							loop_1 = loop.addElement("BookingID");
							valueMap.put("loop_1", row3.BookingID);
							if (valueMap.get("loop_1") != null) {
								routines.system.NestXMLTool.setText(loop_1,
										FormatterUtils.fm(valueMap.get("loop_1"), null));
							}
							org.dom4j.Element loop_2 = null;
							loop_2 = loop.addElement("ContactID");
							valueMap.put("loop_2", row3.ContactID);
							if (valueMap.get("loop_2") != null) {
								routines.system.NestXMLTool.setText(loop_2,
										FormatterUtils.fm(valueMap.get("loop_2"), null));
							}
							org.dom4j.Element loop_3 = null;
							loop_3 = loop.addElement("CompanyName");
							valueMap.put("loop_3", row3.CompanyName);
							if (valueMap.get("loop_3") != null) {
								routines.system.NestXMLTool.setText(loop_3,
										FormatterUtils.fm(valueMap.get("loop_3"), null));
							}
							org.dom4j.Element loop_4 = null;
							loop_4 = loop.addElement("Name");
							valueMap.put("loop_4", row3.Name);
							if (valueMap.get("loop_4") != null) {
								routines.system.NestXMLTool.setText(loop_4,
										FormatterUtils.fm(valueMap.get("loop_4"), null));
							}
							org.dom4j.Element loop_5 = null;
							loop_5 = loop.addElement("Surname");
							valueMap.put("loop_5", row3.Surname);
							if (valueMap.get("loop_5") != null) {
								routines.system.NestXMLTool.setText(loop_5,
										FormatterUtils.fm(valueMap.get("loop_5"), null));
							}
							org.dom4j.Element loop_6 = null;
							loop_6 = loop.addElement("Address1");
							valueMap.put("loop_6", row3.Address1);
							if (valueMap.get("loop_6") != null) {
								routines.system.NestXMLTool.setText(loop_6,
										FormatterUtils.fm(valueMap.get("loop_6"), null));
							}
							org.dom4j.Element loop_7 = null;
							loop_7 = loop.addElement("Address2");
							valueMap.put("loop_7", row3.Address2);
							if (valueMap.get("loop_7") != null) {
								routines.system.NestXMLTool.setText(loop_7,
										FormatterUtils.fm(valueMap.get("loop_7"), null));
							}
							org.dom4j.Element loop_8 = null;
							loop_8 = loop.addElement("Address3");
							valueMap.put("loop_8", row3.Address3);
							if (valueMap.get("loop_8") != null) {
								routines.system.NestXMLTool.setText(loop_8,
										FormatterUtils.fm(valueMap.get("loop_8"), null));
							}
							org.dom4j.Element loop_9 = null;
							loop_9 = loop.addElement("Address4");
							valueMap.put("loop_9", row3.Address4);
							if (valueMap.get("loop_9") != null) {
								routines.system.NestXMLTool.setText(loop_9,
										FormatterUtils.fm(valueMap.get("loop_9"), null));
							}
							org.dom4j.Element loop_10 = null;
							loop_10 = loop.addElement("Postcode");
							valueMap.put("loop_10", row3.Postcode);
							if (valueMap.get("loop_10") != null) {
								routines.system.NestXMLTool.setText(loop_10,
										FormatterUtils.fm(valueMap.get("loop_10"), null));
							}
							org.dom4j.Element loop_11 = null;
							loop_11 = loop.addElement("Telephone");
							valueMap.put("loop_11", row3.Telephone);
							if (valueMap.get("loop_11") != null) {
								routines.system.NestXMLTool.setText(loop_11,
										FormatterUtils.fm(valueMap.get("loop_11"), null));
							}
							org.dom4j.Element loop_12 = null;
							loop_12 = loop.addElement("duration");
							valueMap.put("loop_12", row5.duration);
							if (valueMap.get("loop_12") != null) {
								routines.system.NestXMLTool.setText(loop_12,
										FormatterUtils.fm(valueMap.get("loop_12"), null));
							}
							org.dom4j.Element loop_13 = null;
							loop_13 = loop.addElement("distance");
							valueMap.put("loop_13", row5.distance);
							if (valueMap.get("loop_13") != null) {
								routines.system.NestXMLTool.setText(loop_13,
										FormatterUtils.fm(valueMap.get("loop_13"), null));
							}
						}
					}

					GenerateDocument_copyOfcopyOfSortieBenevole gen_Doc_copyOfcopyOfSortieBenevole_tXMLMap_4_TXMLMAP_OUT = new GenerateDocument_copyOfcopyOfSortieBenevole();
					boolean docAlreadyInstanciate_copyOfcopyOfSortieBenevole = false;

					/**
					 * [tXMLMap_4_TXMLMAP_OUT begin ] stop
					 */

					/**
					 * [tRESTRequest_1_In begin ] start
					 */

					ok_Hash.put("tRESTRequest_1_In", false);
					start_Hash.put("tRESTRequest_1_In", System.currentTimeMillis());

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_In";

					int tos_count_tRESTRequest_1_In = 0;

					resourceMap.remove("inIterateVComp");

					/**
					 * [tRESTRequest_1_In begin ] stop
					 */

					/**
					 * [tRESTRequest_1_In main ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_In";

					if (requestMessage_tRESTRequest_1.containsKey("ERROR")) { // wrong request received
						benevoleposition = null;
						benevolerequest = null;
						benevolesrequest = null;
						Requete = null;
					} else { // non-error (not wrong request)

						String matchedUriPattern_tRESTRequest_1 = (String) requestMessage_tRESTRequest_1.get("PATTERN");
						String matchedFlow_tRESTRequest_1 = (String) requestMessage_tRESTRequest_1.get("OPERATION");

						java.util.Map<String, Object> params_tRESTRequest_1 = (java.util.Map<String, Object>) requestMessage_tRESTRequest_1
								.get("PARAMS");
						if (matchedFlow_tRESTRequest_1.equals("benevoleposition")) {
							benevoleposition = new benevolepositionStruct();
						} else { // non matched flow
							benevoleposition = null;
						}

						if (matchedFlow_tRESTRequest_1.equals("benevolerequest")) {
							benevolerequest = new benevolerequestStruct();
							if (params_tRESTRequest_1.containsKey("PATH:BookingID:id_String")) {

								benevolerequest.BookingID = (String) params_tRESTRequest_1
										.get("PATH:BookingID:id_String");

							}
						} else { // non matched flow
							benevolerequest = null;
						}

						if (matchedFlow_tRESTRequest_1.equals("benevolesrequest")) {
							benevolesrequest = new benevolesrequestStruct();
						} else { // non matched flow
							benevolesrequest = null;
						}

						if (matchedFlow_tRESTRequest_1.equals("Requete")) {
							Requete = new RequeteStruct();
						} else { // non matched flow
							Requete = null;
						}

					}

					globalMap.put("tRESTRequest_1_URI", (String) requestMessage_tRESTRequest_1.get("URI"));
					globalMap.put("tRESTRequest_1_URI_BASE", (String) requestMessage_tRESTRequest_1.get("URI_BASE"));
					globalMap.put("tRESTRequest_1_URI_ABSOLUTE",
							(String) requestMessage_tRESTRequest_1.get("URI_ABSOLUTE"));
					globalMap.put("tRESTRequest_1_URI_REQUEST",
							(String) requestMessage_tRESTRequest_1.get("URI_REQUEST"));
					globalMap.put("tRESTRequest_1_HTTP_METHOD", (String) requestMessage_tRESTRequest_1.get("VERB"));

					globalMap.put("tRESTRequest_1_ATTACHMENT_HEADERS",
							requestMessage_tRESTRequest_1.get("ATTACHMENT_HEADERS"));
					globalMap.put("tRESTRequest_1_ATTACHMENT_FILENAMES",
							requestMessage_tRESTRequest_1.get("ATTACHMENT_FILENAMES"));

					globalMap.put("tRESTRequest_1_PRINCIPAL_NAME",
							(String) requestMessage_tRESTRequest_1.get("PRINCIPAL_NAME"));
					globalMap.put("tRESTRequest_1_CORRELATION_ID",
							(String) requestMessage_tRESTRequest_1.get("CorrelationID"));

					tos_count_tRESTRequest_1_In++;

					/**
					 * [tRESTRequest_1_In main ] stop
					 */

					/**
					 * [tRESTRequest_1_In process_data_begin ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_In";

					/**
					 * [tRESTRequest_1_In process_data_begin ] stop
					 */
// Start of branch "Requete"
					if (Requete != null) {

						/**
						 * [tXMLMap_1 main ] start
						 */

						currentComponent = "tXMLMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "Requete");
						}

						boolean rejectedInnerJoin_tXMLMap_1 = false;
						boolean rejectedDocInnerJoin_tXMLMap_1 = false;
						boolean mainRowRejected_tXMLMap_1 = false;
						boolean isMatchDocRowtXMLMap_1 = false;

						GenerateDocument_Reponse gen_Doc_Reponse_tXMLMap_1 = new GenerateDocument_Reponse();
						Reponse_tmp.body = null;

						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tXMLMap_1__Struct Var = Var__tXMLMap_1;
							// ###############################
							// # Output tables

							Reponse = null;

// # Output table : 'Reponse'

							gen_Doc_Reponse_tXMLMap_1.generateElements(rejectedDocInnerJoin_tXMLMap_1, Requete, Var);

							if (Reponse_tmp.body == null) {
								Reponse_tmp.body = new routines.system.Document();
								Reponse_tmp.body.setDocument(gen_Doc_Reponse_tXMLMap_1.getDocument());
							}

							Reponse = Reponse_tmp;
							Reponse_save = Reponse_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tXMLMap_1 = false;

						tos_count_tXMLMap_1++;

						/**
						 * [tXMLMap_1 main ] stop
						 */

						/**
						 * [tXMLMap_1 process_data_begin ] start
						 */

						currentComponent = "tXMLMap_1";

						/**
						 * [tXMLMap_1 process_data_begin ] stop
						 */
// Start of branch "Reponse"
						if (Reponse != null) {

							/**
							 * [tRESTResponse_1 main ] start
							 */

							currentComponent = "tRESTResponse_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "Reponse");
							}

							java.io.OutputStream outputStream_tRESTResponse_1 = (java.io.OutputStream) globalMap
									.get("restResponseStream");
							boolean responseAlreadySent_tRESTResponse_1 = globalMap.containsKey("restResponse");

							if (null == outputStream_tRESTResponse_1 && responseAlreadySent_tRESTResponse_1) {
								throw new RuntimeException("Rest response already sent.");
							} else if (!globalMap.containsKey("restRequest")) {
								throw new RuntimeException("Not received rest request yet.");
							} else {
								Integer restProviderStatusCode_tRESTResponse_1 = 200;

								Object restProviderResponse_tRESTResponse_1 = null;
								if (null != Reponse.body) {
									restProviderResponse_tRESTResponse_1 = Reponse.body.getDocument();
								}

								java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_1 = new java.util.TreeMap<String, String>(
										String.CASE_INSENSITIVE_ORDER);

								java.util.Map<String, Object> restRequest_tRESTResponse_1 = (java.util.Map<String, Object>) globalMap
										.get("restRequest");
								org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_1 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_1
										.get("MESSAGE_CONTEXT");

								if (null == outputStream_tRESTResponse_1) {
									java.util.Map<String, Object> restResponse_tRESTResponse_1 = new java.util.HashMap<String, Object>();
									restResponse_tRESTResponse_1.put("BODY", restProviderResponse_tRESTResponse_1);
									restResponse_tRESTResponse_1.put("STATUS", restProviderStatusCode_tRESTResponse_1);
									restResponse_tRESTResponse_1.put("HEADERS",
											restProviderResponseHeaders_tRESTResponse_1);
									restResponse_tRESTResponse_1.put("drop.json.root.element", Boolean.valueOf(false));
									globalMap.put("restResponse", restResponse_tRESTResponse_1);

								} else {

									javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_1 = null;
									if (!responseAlreadySent_tRESTResponse_1) {
										org.apache.cxf.message.Message currentMessage = null;
										if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
											currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
										} else {
											currentMessage = ((org.apache.cxf.message.Message) restRequest_tRESTResponse_1
													.get("CURRENT_MESSAGE"));
										}

										if (currentMessage != null && currentMessage.getExchange() != null) {
											currentMessage.getExchange()
													.put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION, true);
										}

										messageContext_tRESTResponse_1.put(org.apache.cxf.message.Message.RESPONSE_CODE,
												restProviderStatusCode_tRESTResponse_1);
										javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_1 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
										for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_1
												.entrySet()) {
											headersMultivaluedMap_tRESTResponse_1.putSingle(multivaluedHeader.getKey(),
													multivaluedHeader.getValue());
										}
										messageContext_tRESTResponse_1.put(
												org.apache.cxf.message.Message.PROTOCOL_HEADERS,
												headersMultivaluedMap_tRESTResponse_1);

										String responseContentType_tRESTResponse_1 = null;

										if (currentMessage != null && currentMessage.getExchange() != null) {
											responseContentType_tRESTResponse_1 = (String) currentMessage.getExchange()
													.get(org.apache.cxf.message.Message.CONTENT_TYPE);
										}

										if (null == responseContentType_tRESTResponse_1) {
											// this should not be needed, just in case. set it to the first value in the
											// sorted list returned from HttpHeaders
											responseMediaType_tRESTResponse_1 = messageContext_tRESTResponse_1
													.getHttpHeaders().getAcceptableMediaTypes().get(0);
										} else {
											responseMediaType_tRESTResponse_1 = org.apache.cxf.jaxrs.utils.JAXRSUtils
													.toMediaType(responseContentType_tRESTResponse_1);
										}
										globalMap.put("restResponseMediaType", responseMediaType_tRESTResponse_1);

										String responseMediaSubType_tRESTResponse_1 = responseMediaType_tRESTResponse_1
												.getSubtype();
										if (responseMediaSubType_tRESTResponse_1.equals("xml")
												|| responseMediaSubType_tRESTResponse_1.endsWith("+xml")) {
											outputStream_tRESTResponse_1.write("<wrapper>".getBytes());
											globalMap.put("restResponseWrappingClosure", "</wrapper>");
										}
										if (responseMediaSubType_tRESTResponse_1.equals("json")
												|| responseMediaSubType_tRESTResponse_1.endsWith("+json")) {
											outputStream_tRESTResponse_1.write("[".getBytes());
											globalMap.put("restResponseWrappingClosure", "]");
										}

										globalMap.put("restResponse", true);
									} else {
										responseMediaType_tRESTResponse_1 = (javax.ws.rs.core.MediaType) globalMap
												.get("restResponseMediaType");
									}

									if (null != restProviderResponse_tRESTResponse_1) {
										String responseMediaSubType_tRESTResponse_1 = responseMediaType_tRESTResponse_1
												.getSubtype();
										if (responseMediaSubType_tRESTResponse_1.equals("json")
												|| responseMediaSubType_tRESTResponse_1.endsWith("+json")) {
											if (globalMap.containsKey("restResponseJsonStarted")) {
												outputStream_tRESTResponse_1.write(",".getBytes());
											} else {
												globalMap.put("restResponseJsonStarted", true);
											}
										}

										Class<? extends Object> responseBodyClass_tRESTResponse_1 = restProviderResponse_tRESTResponse_1
												.getClass();
										javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_1 = messageContext_tRESTResponse_1
												.getProviders();
										javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_1 = messageBodyProviders_tRESTResponse_1
												.getMessageBodyWriter(responseBodyClass_tRESTResponse_1,
														responseBodyClass_tRESTResponse_1, null,
														responseMediaType_tRESTResponse_1);

										if (messageBodyWriter_tRESTResponse_1 instanceof StreamingDOM4JProvider) {
											((StreamingDOM4JProvider) messageBodyWriter_tRESTResponse_1)
													.setGlobalMap(globalMap);
										}

										messageBodyWriter_tRESTResponse_1.writeTo(restProviderResponse_tRESTResponse_1,
												responseBodyClass_tRESTResponse_1, responseBodyClass_tRESTResponse_1,
												new java.lang.annotation.Annotation[] {},
												responseMediaType_tRESTResponse_1, null, outputStream_tRESTResponse_1);
									}
									// initial variant
									// outputStream_tRESTResponse_1.write(String.valueOf(restProviderResponse_tRESTResponse_1).getBytes());
									outputStream_tRESTResponse_1.flush();
								}
							}

							tos_count_tRESTResponse_1++;

							/**
							 * [tRESTResponse_1 main ] stop
							 */

							/**
							 * [tRESTResponse_1 process_data_begin ] start
							 */

							currentComponent = "tRESTResponse_1";

							/**
							 * [tRESTResponse_1 process_data_begin ] stop
							 */

							/**
							 * [tRESTResponse_1 process_data_end ] start
							 */

							currentComponent = "tRESTResponse_1";

							/**
							 * [tRESTResponse_1 process_data_end ] stop
							 */

						} // End of branch "Reponse"

						/**
						 * [tXMLMap_1 process_data_end ] start
						 */

						currentComponent = "tXMLMap_1";

						/**
						 * [tXMLMap_1 process_data_end ] stop
						 */

					} // End of branch "Requete"

// Start of branch "benevolesrequest"
					if (benevolesrequest != null) {

						/**
						 * [tFlowToIterate_1 main ] start
						 */

						currentComponent = "tFlowToIterate_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "benevolesrequest");
						}

						nb_line_tFlowToIterate_1++;
						counter_tFlowToIterate_1++;
						globalMap.put("tFlowToIterate_1_CURRENT_ITERATION", counter_tFlowToIterate_1);

						tos_count_tFlowToIterate_1++;

						/**
						 * [tFlowToIterate_1 main ] stop
						 */

						/**
						 * [tFlowToIterate_1 process_data_begin ] start
						 */

						currentComponent = "tFlowToIterate_1";

						/**
						 * [tFlowToIterate_1 process_data_begin ] stop
						 */
						NB_ITERATE_tFileInputDelimited_1++;

						if (execStat) {
							runStat.updateStatOnConnection("row1", 3, 0);
						}

						if (execStat) {
							runStat.updateStatOnConnection("SortieBenevole", 3, 0);
						}

						if (execStat) {
							runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
						}

						if (execStat) {
							runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tFileInputDelimited_1);
							// Thread.sleep(1000);
						}

						/**
						 * [tXMLMap_2_TXMLMAP_OUT begin ] start
						 */

						ok_Hash.put("tXMLMap_2_TXMLMAP_OUT", false);
						start_Hash.put("tXMLMap_2_TXMLMAP_OUT", System.currentTimeMillis());

						currentVirtualComponent = "tXMLMap_2";

						currentComponent = "tXMLMap_2_TXMLMAP_OUT";

						if (execStat) {
							runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
						}

						int tos_count_tXMLMap_2_TXMLMAP_OUT = 0;

//===============================input xml init part===============================
						class XML_API_tXMLMap_2_TXMLMAP_OUT {
							public boolean isDefNull(org.dom4j.Node node)
									throws javax.xml.transform.TransformerException {
								if (node != null && node instanceof org.dom4j.Element) {
									org.dom4j.Attribute attri = ((org.dom4j.Element) node).attribute("nil");
									if (attri != null && ("true").equals(attri.getText())) {
										return true;
									}
								}
								return false;
							}

							public boolean isMissing(org.dom4j.Node node)
									throws javax.xml.transform.TransformerException {
								return node == null ? true : false;
							}

							public boolean isEmpty(org.dom4j.Node node)
									throws javax.xml.transform.TransformerException {
								if (node != null) {
									return node.getText().length() == 0;
								}
								return false;
							}
						}
						class Var__tXMLMap_2_TXMLMAP_OUT__Struct {
						}
						Var__tXMLMap_2_TXMLMAP_OUT__Struct Var__tXMLMap_2_TXMLMAP_OUT = new Var__tXMLMap_2_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
						SortieBenevoleStruct SortieBenevole_tmp = new SortieBenevoleStruct();
						SortieBenevoleStruct SortieBenevole_save = null;
//the aggregate variable
						SortieBenevoleStruct SortieBenevole_aggregate = null;
//init the resultset for aggregate
						java.util.List<Object> allOutsForAggregate_tXMLMap_2 = new java.util.ArrayList<Object>();
						globalMap.put("allOutsForAggregate_tXMLMap_2", allOutsForAggregate_tXMLMap_2);
// ###############################
						int nb_line_tXMLMap_2_TXMLMAP_OUT = 0;

						XML_API_tXMLMap_2_TXMLMAP_OUT xml_api_tXMLMap_2_TXMLMAP_OUT = new XML_API_tXMLMap_2_TXMLMAP_OUT();

						// the map store the previous value of aggregate columns
						java.util.Map<String, Object> aggregateCacheMap_tXMLMap_2_TXMLMAP_OUT = new java.util.HashMap<String, Object>();

						class GenerateDocument_SortieBenevole {

							java.util.Map<String, Object> valueMap = null;

							routines.system.DocumentGenerateOrderHelper orderHelper = new routines.system.DocumentGenerateOrderHelper(
									1);

							org.dom4j.Document doc = null;

							org.dom4j.Element root4Group = null;

							org.dom4j.io.OutputFormat format = null;

							java.util.List<java.util.List<String>> groupbyList = null;
							java.util.List<org.dom4j.Element> groupElementList = null;
							int order = 0;

							boolean isFirst = true;

							boolean needRoot = true;

							String currentValue = null;

							org.dom4j.Element subTreeLoopParent0 = null;
							public boolean subTreeLoop0 = false;

							public GenerateDocument_SortieBenevole() {
//    	this.treeNodeAPI = treeNodeAPI;

								valueMap = new java.util.HashMap<String, Object>();

								groupbyList = new java.util.ArrayList<java.util.List<String>>();
								groupElementList = new java.util.ArrayList<org.dom4j.Element>();

								doc = org.dom4j.DocumentHelper.createDocument();
								format = org.dom4j.io.OutputFormat.createPrettyPrint();
								format.setTrimText(false);
							}

							public org.dom4j.Document getDocument() {
								return this.doc;
							}

							// We generate the TreeNode_API object only if there is a document in the main
							// input table.
							void generateElements(boolean isInnerJoin, row1Struct row1,
									Var__tXMLMap_2_TXMLMAP_OUT__Struct Var) {

								/*
								 * if(this.treeNodeAPI==null) { this.treeNodeAPI = treeNodeAPI; }
								 */

								org.dom4j.Element subTreeRootParent = null;
// build root xml tree 
								if (needRoot) {
									needRoot = false;
									org.dom4j.Element root = null;
									root = doc.addElement("root");
									subTreeRootParent = root;
									org.dom4j.Element root_0 = null;
									root_0 = root.addElement("benevoles");
									subTreeRootParent = root_0;
									subTreeLoopParent0 = root_0;
									root4Group = subTreeRootParent;
								} else {
									subTreeRootParent = root4Group;
								}
								/* build group xml tree */
								boolean isNewElement = false;
								isNewElement = false;
								org.dom4j.Element loop = null;
								loop = org.dom4j.DocumentHelper.createElement("benevole");
								subTreeRootParent.elements().add(orderHelper.getInsertLocation(0, 0), loop);
								subTreeRootParent = loop;
								org.dom4j.Element loop_1 = null;
								loop_1 = loop.addElement("BookingID");
								valueMap.put("loop_1", row1.BookingID);
								if (valueMap.get("loop_1") != null) {
									routines.system.NestXMLTool.setText(loop_1,
											FormatterUtils.fm(valueMap.get("loop_1"), null));
								}
								org.dom4j.Element loop_2 = null;
								loop_2 = loop.addElement("ContactID");
								valueMap.put("loop_2", row1.ContactID);
								if (valueMap.get("loop_2") != null) {
									routines.system.NestXMLTool.setText(loop_2,
											FormatterUtils.fm(valueMap.get("loop_2"), null));
								}
								org.dom4j.Element loop_3 = null;
								loop_3 = loop.addElement("CompanyName");
								valueMap.put("loop_3", row1.CompanyName);
								if (valueMap.get("loop_3") != null) {
									routines.system.NestXMLTool.setText(loop_3,
											FormatterUtils.fm(valueMap.get("loop_3"), null));
								}
								org.dom4j.Element loop_4 = null;
								loop_4 = loop.addElement("Name");
								valueMap.put("loop_4", row1.Name);
								if (valueMap.get("loop_4") != null) {
									routines.system.NestXMLTool.setText(loop_4,
											FormatterUtils.fm(valueMap.get("loop_4"), null));
								}
								org.dom4j.Element loop_5 = null;
								loop_5 = loop.addElement("Surname");
								valueMap.put("loop_5", row1.Surname);
								if (valueMap.get("loop_5") != null) {
									routines.system.NestXMLTool.setText(loop_5,
											FormatterUtils.fm(valueMap.get("loop_5"), null));
								}
								org.dom4j.Element loop_6 = null;
								loop_6 = loop.addElement("Address1");
								valueMap.put("loop_6", row1.Address1);
								if (valueMap.get("loop_6") != null) {
									routines.system.NestXMLTool.setText(loop_6,
											FormatterUtils.fm(valueMap.get("loop_6"), null));
								}
								org.dom4j.Element loop_7 = null;
								loop_7 = loop.addElement("Address2");
								valueMap.put("loop_7", row1.Address2);
								if (valueMap.get("loop_7") != null) {
									routines.system.NestXMLTool.setText(loop_7,
											FormatterUtils.fm(valueMap.get("loop_7"), null));
								}
								org.dom4j.Element loop_8 = null;
								loop_8 = loop.addElement("Address3");
								valueMap.put("loop_8", row1.Address3);
								if (valueMap.get("loop_8") != null) {
									routines.system.NestXMLTool.setText(loop_8,
											FormatterUtils.fm(valueMap.get("loop_8"), null));
								}
								org.dom4j.Element loop_9 = null;
								loop_9 = loop.addElement("Address4");
								valueMap.put("loop_9", row1.Address4);
								if (valueMap.get("loop_9") != null) {
									routines.system.NestXMLTool.setText(loop_9,
											FormatterUtils.fm(valueMap.get("loop_9"), null));
								}
								org.dom4j.Element loop_10 = null;
								loop_10 = loop.addElement("Postcode");
								valueMap.put("loop_10", row1.Postcode);
								if (valueMap.get("loop_10") != null) {
									routines.system.NestXMLTool.setText(loop_10,
											FormatterUtils.fm(valueMap.get("loop_10"), null));
								}
								org.dom4j.Element loop_11 = null;
								loop_11 = loop.addElement("Telephone");
								valueMap.put("loop_11", row1.Telephone);
								if (valueMap.get("loop_11") != null) {
									routines.system.NestXMLTool.setText(loop_11,
											FormatterUtils.fm(valueMap.get("loop_11"), null));
								}
							}
						}

						GenerateDocument_SortieBenevole gen_Doc_SortieBenevole_tXMLMap_2_TXMLMAP_OUT = new GenerateDocument_SortieBenevole();
						boolean docAlreadyInstanciate_SortieBenevole = false;

						/**
						 * [tXMLMap_2_TXMLMAP_OUT begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 begin ] start
						 */

						ok_Hash.put("tFileInputDelimited_1", false);
						start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

						currentComponent = "tFileInputDelimited_1";

						int tos_count_tFileInputDelimited_1 = 0;

						final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

						int nb_line_tFileInputDelimited_1 = 0;
						int footer_tFileInputDelimited_1 = 0;
						int totalLinetFileInputDelimited_1 = 0;
						int limittFileInputDelimited_1 = -1;
						int lastLinetFileInputDelimited_1 = -1;

						char fieldSeparator_tFileInputDelimited_1[] = null;

						// support passing value (property: Field Separator) by 'context.fs' or
						// 'globalMap.get("fs")'.
						if (((String) ",").length() > 0) {
							fieldSeparator_tFileInputDelimited_1 = ((String) ",").toCharArray();
						} else {
							throw new IllegalArgumentException("Field Separator must be assigned a char.");
						}

						char rowSeparator_tFileInputDelimited_1[] = null;

						// support passing value (property: Row Separator) by 'context.rs' or
						// 'globalMap.get("rs")'.
						if (((String) "\n").length() > 0) {
							rowSeparator_tFileInputDelimited_1 = ((String) "\n").toCharArray();
						} else {
							throw new IllegalArgumentException("Row Separator must be assigned a char.");
						}

						Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */
								"C:/Users/steve/Downloads/EchantillonDonnéesFestineuch (2)/Benevoles.csv"/**
																											 * End field
																											 * tFileInputDelimited_1:FILENAME
																											 */
						;
						com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

						try {

							String[] rowtFileInputDelimited_1 = null;
							int currentLinetFileInputDelimited_1 = 0;
							int outputLinetFileInputDelimited_1 = 0;
							try {// TD110 begin
								if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

									int footer_value_tFileInputDelimited_1 = 0;
									if (footer_value_tFileInputDelimited_1 > 0) {
										throw new java.lang.Exception(
												"When the input source is a stream,footer shouldn't be bigger than 0.");
									}

									csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
											(java.io.InputStream) filename_tFileInputDelimited_1,
											fieldSeparator_tFileInputDelimited_1[0], "US-ASCII");
								} else {
									csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
											new java.io.BufferedReader(new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_1)),
													"US-ASCII")),
											fieldSeparator_tFileInputDelimited_1[0]);
								}

								csvReadertFileInputDelimited_1.setTrimWhitespace(false);
								if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
										&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
									csvReadertFileInputDelimited_1
											.setLineEnd("" + rowSeparator_tFileInputDelimited_1[0]);

								csvReadertFileInputDelimited_1.setQuoteChar('"');

								csvReadertFileInputDelimited_1
										.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());

								if (footer_tFileInputDelimited_1 > 0) {
									for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 2; totalLinetFileInputDelimited_1++) {
										csvReadertFileInputDelimited_1.readNext();
									}
									csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
									while (csvReadertFileInputDelimited_1.readNext()) {

										totalLinetFileInputDelimited_1++;

									}
									int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
											- footer_tFileInputDelimited_1 < 0 ? 0
													: totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1;
									if (lastLinetFileInputDelimited_1 > 0) {
										lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1
												? lastLinetFileInputDelimited_1
												: lastLineTemptFileInputDelimited_1;
									} else {
										lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
									}

									csvReadertFileInputDelimited_1.close();
									if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
										csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
												(java.io.InputStream) filename_tFileInputDelimited_1,
												fieldSeparator_tFileInputDelimited_1[0], "US-ASCII");
									} else {
										csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
												new java.io.BufferedReader(new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_1)),
														"US-ASCII")),
												fieldSeparator_tFileInputDelimited_1[0]);
									}
									csvReadertFileInputDelimited_1.setTrimWhitespace(false);
									if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
											&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
										csvReadertFileInputDelimited_1
												.setLineEnd("" + rowSeparator_tFileInputDelimited_1[0]);

									csvReadertFileInputDelimited_1.setQuoteChar('"');

									csvReadertFileInputDelimited_1
											.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());

								}

								if (limittFileInputDelimited_1 != 0) {
									for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 2; currentLinetFileInputDelimited_1++) {
										csvReadertFileInputDelimited_1.readNext();
									}
								}
								csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);

							} catch (java.lang.Exception e) {

								System.err.println(e.getMessage());

							} // TD110 end

							while (limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1 != null
									&& csvReadertFileInputDelimited_1.readNext()) {
								rowstate_tFileInputDelimited_1.reset();

								rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();

								currentLinetFileInputDelimited_1++;

								if (lastLinetFileInputDelimited_1 > -1
										&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
									break;
								}
								outputLinetFileInputDelimited_1++;
								if (limittFileInputDelimited_1 > 0
										&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
									break;
								}

								row1 = null;

								boolean whetherReject_tFileInputDelimited_1 = false;
								row1 = new row1Struct();
								try {

									char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
									// support passing value (property: Field Separator) by 'context.fs' or
									// 'globalMap.get("fs")'.
									if (((String) ",").length() > 0) {
										fieldSeparator_tFileInputDelimited_1_ListType = ((String) ",").toCharArray();
									} else {
										throw new IllegalArgumentException("Field Separator must be assigned a char.");
									}
									if (rowtFileInputDelimited_1.length == 1
											&& ("\015").equals(rowtFileInputDelimited_1[0])) {// empty line when row
																								// separator is '\n'

										row1.BookingID = null;

										row1.ContactID = null;

										row1.CompanyName = null;

										row1.Name = null;

										row1.Surname = null;

										row1.Address1 = null;

										row1.Address2 = null;

										row1.Address3 = null;

										row1.Address4 = null;

										row1.Postcode = null;

										row1.Telephone = null;

									} else {

										int columnIndexWithD_tFileInputDelimited_1 = 0; // Column Index

										columnIndexWithD_tFileInputDelimited_1 = 0;

										if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

											row1.BookingID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

										} else {

											row1.BookingID = null;

										}

										columnIndexWithD_tFileInputDelimited_1 = 1;

										if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

											row1.ContactID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

										} else {

											row1.ContactID = null;

										}

										columnIndexWithD_tFileInputDelimited_1 = 2;

										if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

											row1.CompanyName = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

										} else {

											row1.CompanyName = null;

										}

										columnIndexWithD_tFileInputDelimited_1 = 3;

										if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

											row1.Name = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

										} else {

											row1.Name = null;

										}

										columnIndexWithD_tFileInputDelimited_1 = 4;

										if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

											row1.Surname = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

										} else {

											row1.Surname = null;

										}

										columnIndexWithD_tFileInputDelimited_1 = 5;

										if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

											row1.Address1 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

										} else {

											row1.Address1 = null;

										}

										columnIndexWithD_tFileInputDelimited_1 = 6;

										if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

											row1.Address2 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

										} else {

											row1.Address2 = null;

										}

										columnIndexWithD_tFileInputDelimited_1 = 7;

										if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

											row1.Address3 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

										} else {

											row1.Address3 = null;

										}

										columnIndexWithD_tFileInputDelimited_1 = 8;

										if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

											row1.Address4 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

										} else {

											row1.Address4 = null;

										}

										columnIndexWithD_tFileInputDelimited_1 = 9;

										if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

											row1.Postcode = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

										} else {

											row1.Postcode = null;

										}

										columnIndexWithD_tFileInputDelimited_1 = 10;

										if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

											row1.Telephone = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

										} else {

											row1.Telephone = null;

										}

									}

									if (rowstate_tFileInputDelimited_1.getException() != null) {
										throw rowstate_tFileInputDelimited_1.getException();
									}

								} catch (java.lang.Exception e) {
									whetherReject_tFileInputDelimited_1 = true;

									System.err.println(e.getMessage());
									row1 = null;

								}

								/**
								 * [tFileInputDelimited_1 begin ] stop
								 */

								/**
								 * [tFileInputDelimited_1 main ] start
								 */

								currentComponent = "tFileInputDelimited_1";

								tos_count_tFileInputDelimited_1++;

								/**
								 * [tFileInputDelimited_1 main ] stop
								 */

								/**
								 * [tFileInputDelimited_1 process_data_begin ] start
								 */

								currentComponent = "tFileInputDelimited_1";

								/**
								 * [tFileInputDelimited_1 process_data_begin ] stop
								 */
// Start of branch "row1"
								if (row1 != null) {

									/**
									 * [tXMLMap_2_TXMLMAP_OUT main ] start
									 */

									currentVirtualComponent = "tXMLMap_2";

									currentComponent = "tXMLMap_2_TXMLMAP_OUT";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
									}

									boolean rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
									boolean rejectedDocInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
									boolean mainRowRejected_tXMLMap_2_TXMLMAP_OUT = false;
									boolean isMatchDocRowtXMLMap_2_TXMLMAP_OUT = false;

									SortieBenevole_tmp.body = null;

									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tXMLMap_2_TXMLMAP_OUT__Struct Var = Var__tXMLMap_2_TXMLMAP_OUT;
										// ###############################
										// # Output tables

										SortieBenevole = null;

// # Output table : 'SortieBenevole'

										if (!docAlreadyInstanciate_SortieBenevole) {
											docAlreadyInstanciate_SortieBenevole = true;
											gen_Doc_SortieBenevole_tXMLMap_2_TXMLMAP_OUT = new GenerateDocument_SortieBenevole();
//init one new out struct for cache the result.
											SortieBenevole_aggregate = new SortieBenevoleStruct();
											SortieBenevole_aggregate.body = new routines.system.Document();
											SortieBenevole_aggregate.body.setDocument(
													gen_Doc_SortieBenevole_tXMLMap_2_TXMLMAP_OUT.getDocument());

//construct the resultset
											allOutsForAggregate_tXMLMap_2.add(SortieBenevole_aggregate);
										}

										gen_Doc_SortieBenevole_tXMLMap_2_TXMLMAP_OUT.generateElements(
												rejectedDocInnerJoin_tXMLMap_2_TXMLMAP_OUT, row1, Var);

// ###############################

									} // end of Var scope

									rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;

									tos_count_tXMLMap_2_TXMLMAP_OUT++;

									/**
									 * [tXMLMap_2_TXMLMAP_OUT main ] stop
									 */

									/**
									 * [tXMLMap_2_TXMLMAP_OUT process_data_begin ] start
									 */

									currentVirtualComponent = "tXMLMap_2";

									currentComponent = "tXMLMap_2_TXMLMAP_OUT";

									/**
									 * [tXMLMap_2_TXMLMAP_OUT process_data_begin ] stop
									 */

									/**
									 * [tXMLMap_2_TXMLMAP_OUT process_data_end ] start
									 */

									currentVirtualComponent = "tXMLMap_2";

									currentComponent = "tXMLMap_2_TXMLMAP_OUT";

									/**
									 * [tXMLMap_2_TXMLMAP_OUT process_data_end ] stop
									 */

								} // End of branch "row1"

								/**
								 * [tFileInputDelimited_1 process_data_end ] start
								 */

								currentComponent = "tFileInputDelimited_1";

								/**
								 * [tFileInputDelimited_1 process_data_end ] stop
								 */

								/**
								 * [tFileInputDelimited_1 end ] start
								 */

								currentComponent = "tFileInputDelimited_1";

								nb_line_tFileInputDelimited_1++;
							}

						} finally {
							if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
								if (csvReadertFileInputDelimited_1 != null) {
									csvReadertFileInputDelimited_1.close();
								}
							}
							if (csvReadertFileInputDelimited_1 != null) {
								globalMap.put("tFileInputDelimited_1_NB_LINE", nb_line_tFileInputDelimited_1);
							}

						}

						ok_Hash.put("tFileInputDelimited_1", true);
						end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

						/**
						 * [tFileInputDelimited_1 end ] stop
						 */

						/**
						 * [tXMLMap_2_TXMLMAP_OUT end ] start
						 */

						currentVirtualComponent = "tXMLMap_2";

						currentComponent = "tXMLMap_2_TXMLMAP_OUT";

						if (execStat) {
							runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
						}

						ok_Hash.put("tXMLMap_2_TXMLMAP_OUT", true);
						end_Hash.put("tXMLMap_2_TXMLMAP_OUT", System.currentTimeMillis());

						/**
						 * [tXMLMap_2_TXMLMAP_OUT end ] stop
						 */

						/**
						 * [tRESTResponse_2 begin ] start
						 */

						ok_Hash.put("tRESTResponse_2", false);
						start_Hash.put("tRESTResponse_2", System.currentTimeMillis());

						currentComponent = "tRESTResponse_2";

						if (execStat) {
							runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "SortieBenevole");
						}

						int tos_count_tRESTResponse_2 = 0;

						/**
						 * [tRESTResponse_2 begin ] stop
						 */

						/**
						 * [tXMLMap_2_TXMLMAP_IN begin ] start
						 */

						ok_Hash.put("tXMLMap_2_TXMLMAP_IN", false);
						start_Hash.put("tXMLMap_2_TXMLMAP_IN", System.currentTimeMillis());

						currentVirtualComponent = "tXMLMap_2";

						currentComponent = "tXMLMap_2_TXMLMAP_IN";

						int tos_count_tXMLMap_2_TXMLMAP_IN = 0;

						java.util.List<Object> outs_tXMLMap_2 = (java.util.List<Object>) globalMap
								.get("allOutsForAggregate_tXMLMap_2");
						for (Object row_out_tXMLMap_2_TXMLMAP_IN : outs_tXMLMap_2) {// TD512

							/**
							 * [tXMLMap_2_TXMLMAP_IN begin ] stop
							 */

							/**
							 * [tXMLMap_2_TXMLMAP_IN main ] start
							 */

							currentVirtualComponent = "tXMLMap_2";

							currentComponent = "tXMLMap_2_TXMLMAP_IN";

							SortieBenevole = null;
							if (row_out_tXMLMap_2_TXMLMAP_IN != null
									&& row_out_tXMLMap_2_TXMLMAP_IN instanceof SortieBenevoleStruct) {
								SortieBenevole = (SortieBenevoleStruct) row_out_tXMLMap_2_TXMLMAP_IN;
								routines.system.NestXMLTool.generateOk(SortieBenevole.body, false);
							}

							tos_count_tXMLMap_2_TXMLMAP_IN++;

							/**
							 * [tXMLMap_2_TXMLMAP_IN main ] stop
							 */

							/**
							 * [tXMLMap_2_TXMLMAP_IN process_data_begin ] start
							 */

							currentVirtualComponent = "tXMLMap_2";

							currentComponent = "tXMLMap_2_TXMLMAP_IN";

							/**
							 * [tXMLMap_2_TXMLMAP_IN process_data_begin ] stop
							 */
// Start of branch "SortieBenevole"
							if (SortieBenevole != null) {

								/**
								 * [tRESTResponse_2 main ] start
								 */

								currentComponent = "tRESTResponse_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "SortieBenevole");
								}

								java.io.OutputStream outputStream_tRESTResponse_2 = (java.io.OutputStream) globalMap
										.get("restResponseStream");
								boolean responseAlreadySent_tRESTResponse_2 = globalMap.containsKey("restResponse");

								if (null == outputStream_tRESTResponse_2 && responseAlreadySent_tRESTResponse_2) {
									throw new RuntimeException("Rest response already sent.");
								} else if (!globalMap.containsKey("restRequest")) {
									throw new RuntimeException("Not received rest request yet.");
								} else {
									Integer restProviderStatusCode_tRESTResponse_2 = 200;

									Object restProviderResponse_tRESTResponse_2 = null;
									if (null != SortieBenevole.body) {
										restProviderResponse_tRESTResponse_2 = SortieBenevole.body.getDocument();
									}

									java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_2 = new java.util.TreeMap<String, String>(
											String.CASE_INSENSITIVE_ORDER);

									java.util.Map<String, Object> restRequest_tRESTResponse_2 = (java.util.Map<String, Object>) globalMap
											.get("restRequest");
									org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_2 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_2
											.get("MESSAGE_CONTEXT");

									if (null == outputStream_tRESTResponse_2) {
										java.util.Map<String, Object> restResponse_tRESTResponse_2 = new java.util.HashMap<String, Object>();
										restResponse_tRESTResponse_2.put("BODY", restProviderResponse_tRESTResponse_2);
										restResponse_tRESTResponse_2.put("STATUS",
												restProviderStatusCode_tRESTResponse_2);
										restResponse_tRESTResponse_2.put("HEADERS",
												restProviderResponseHeaders_tRESTResponse_2);
										restResponse_tRESTResponse_2.put("drop.json.root.element",
												Boolean.valueOf(false));
										globalMap.put("restResponse", restResponse_tRESTResponse_2);

									} else {

										javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_2 = null;
										if (!responseAlreadySent_tRESTResponse_2) {
											org.apache.cxf.message.Message currentMessage = null;
											if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
												currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils
														.getCurrentMessage();
											} else {
												currentMessage = ((org.apache.cxf.message.Message) restRequest_tRESTResponse_2
														.get("CURRENT_MESSAGE"));
											}

											if (currentMessage != null && currentMessage.getExchange() != null) {
												currentMessage.getExchange()
														.put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION, true);
											}

											messageContext_tRESTResponse_2.put(
													org.apache.cxf.message.Message.RESPONSE_CODE,
													restProviderStatusCode_tRESTResponse_2);
											javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_2 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
											for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_2
													.entrySet()) {
												headersMultivaluedMap_tRESTResponse_2.putSingle(
														multivaluedHeader.getKey(), multivaluedHeader.getValue());
											}
											messageContext_tRESTResponse_2.put(
													org.apache.cxf.message.Message.PROTOCOL_HEADERS,
													headersMultivaluedMap_tRESTResponse_2);

											String responseContentType_tRESTResponse_2 = null;

											if (currentMessage != null && currentMessage.getExchange() != null) {
												responseContentType_tRESTResponse_2 = (String) currentMessage
														.getExchange().get(org.apache.cxf.message.Message.CONTENT_TYPE);
											}

											if (null == responseContentType_tRESTResponse_2) {
												// this should not be needed, just in case. set it to the first value in
												// the sorted list returned from HttpHeaders
												responseMediaType_tRESTResponse_2 = messageContext_tRESTResponse_2
														.getHttpHeaders().getAcceptableMediaTypes().get(0);
											} else {
												responseMediaType_tRESTResponse_2 = org.apache.cxf.jaxrs.utils.JAXRSUtils
														.toMediaType(responseContentType_tRESTResponse_2);
											}
											globalMap.put("restResponseMediaType", responseMediaType_tRESTResponse_2);

											String responseMediaSubType_tRESTResponse_2 = responseMediaType_tRESTResponse_2
													.getSubtype();
											if (responseMediaSubType_tRESTResponse_2.equals("xml")
													|| responseMediaSubType_tRESTResponse_2.endsWith("+xml")) {
												outputStream_tRESTResponse_2.write("<wrapper>".getBytes());
												globalMap.put("restResponseWrappingClosure", "</wrapper>");
											}
											if (responseMediaSubType_tRESTResponse_2.equals("json")
													|| responseMediaSubType_tRESTResponse_2.endsWith("+json")) {
												outputStream_tRESTResponse_2.write("[".getBytes());
												globalMap.put("restResponseWrappingClosure", "]");
											}

											globalMap.put("restResponse", true);
										} else {
											responseMediaType_tRESTResponse_2 = (javax.ws.rs.core.MediaType) globalMap
													.get("restResponseMediaType");
										}

										if (null != restProviderResponse_tRESTResponse_2) {
											String responseMediaSubType_tRESTResponse_2 = responseMediaType_tRESTResponse_2
													.getSubtype();
											if (responseMediaSubType_tRESTResponse_2.equals("json")
													|| responseMediaSubType_tRESTResponse_2.endsWith("+json")) {
												if (globalMap.containsKey("restResponseJsonStarted")) {
													outputStream_tRESTResponse_2.write(",".getBytes());
												} else {
													globalMap.put("restResponseJsonStarted", true);
												}
											}

											Class<? extends Object> responseBodyClass_tRESTResponse_2 = restProviderResponse_tRESTResponse_2
													.getClass();
											javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_2 = messageContext_tRESTResponse_2
													.getProviders();
											javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_2 = messageBodyProviders_tRESTResponse_2
													.getMessageBodyWriter(responseBodyClass_tRESTResponse_2,
															responseBodyClass_tRESTResponse_2, null,
															responseMediaType_tRESTResponse_2);

											if (messageBodyWriter_tRESTResponse_2 instanceof StreamingDOM4JProvider) {
												((StreamingDOM4JProvider) messageBodyWriter_tRESTResponse_2)
														.setGlobalMap(globalMap);
											}

											messageBodyWriter_tRESTResponse_2.writeTo(
													restProviderResponse_tRESTResponse_2,
													responseBodyClass_tRESTResponse_2,
													responseBodyClass_tRESTResponse_2,
													new java.lang.annotation.Annotation[] {},
													responseMediaType_tRESTResponse_2, null,
													outputStream_tRESTResponse_2);
										}
										// initial variant
										// outputStream_tRESTResponse_2.write(String.valueOf(restProviderResponse_tRESTResponse_2).getBytes());
										outputStream_tRESTResponse_2.flush();
									}
								}

								tos_count_tRESTResponse_2++;

								/**
								 * [tRESTResponse_2 main ] stop
								 */

								/**
								 * [tRESTResponse_2 process_data_begin ] start
								 */

								currentComponent = "tRESTResponse_2";

								/**
								 * [tRESTResponse_2 process_data_begin ] stop
								 */

								/**
								 * [tRESTResponse_2 process_data_end ] start
								 */

								currentComponent = "tRESTResponse_2";

								/**
								 * [tRESTResponse_2 process_data_end ] stop
								 */

							} // End of branch "SortieBenevole"

							/**
							 * [tXMLMap_2_TXMLMAP_IN process_data_end ] start
							 */

							currentVirtualComponent = "tXMLMap_2";

							currentComponent = "tXMLMap_2_TXMLMAP_IN";

							/**
							 * [tXMLMap_2_TXMLMAP_IN process_data_end ] stop
							 */

							/**
							 * [tXMLMap_2_TXMLMAP_IN end ] start
							 */

							currentVirtualComponent = "tXMLMap_2";

							currentComponent = "tXMLMap_2_TXMLMAP_IN";

						} // TD512

						ok_Hash.put("tXMLMap_2_TXMLMAP_IN", true);
						end_Hash.put("tXMLMap_2_TXMLMAP_IN", System.currentTimeMillis());

						/**
						 * [tXMLMap_2_TXMLMAP_IN end ] stop
						 */

						/**
						 * [tRESTResponse_2 end ] start
						 */

						currentComponent = "tRESTResponse_2";

						if (execStat) {
							runStat.updateStat(resourceMap, iterateId, 2, 0, "SortieBenevole");
						}

						ok_Hash.put("tRESTResponse_2", true);
						end_Hash.put("tRESTResponse_2", System.currentTimeMillis());

						/**
						 * [tRESTResponse_2 end ] stop
						 */

						if (execStat) {
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tFileInputDelimited_1);
						}

						/**
						 * [tFlowToIterate_1 process_data_end ] start
						 */

						currentComponent = "tFlowToIterate_1";

						/**
						 * [tFlowToIterate_1 process_data_end ] stop
						 */

					} // End of branch "benevolesrequest"

// Start of branch "benevolerequest"
					if (benevolerequest != null) {

						/**
						 * [tXMLMap_3_TXMLMAP_OUT main ] start
						 */

						currentVirtualComponent = "tXMLMap_3";

						currentComponent = "tXMLMap_3_TXMLMAP_OUT";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "benevolerequest");
						}

						boolean rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
						boolean rejectedDocInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
						boolean mainRowRejected_tXMLMap_3_TXMLMAP_OUT = false;
						boolean isMatchDocRowtXMLMap_3_TXMLMAP_OUT = false;

						copyOfSortieBenevole_tmp.body = null;

						///////////////////////////////////////////////
						// Starting Lookup Table
						/////////////////////////////////////////////// "org.talend.designer.xmlmap.model.emf.xmlmap.impl.InputXmlTreeImpl@7f369239
						/////////////////////////////////////////////// (expressionFilter: null,
						/////////////////////////////////////////////// activateExpressionFilter: false,
						/////////////////////////////////////////////// activateCondensedTool: false,
						/////////////////////////////////////////////// minimized: false, name: row2,
						/////////////////////////////////////////////// multiLoops: false) (lookup:
						/////////////////////////////////////////////// true, matchingMode:
						/////////////////////////////////////////////// UNIQUE_MATCH, lookupMode:
						/////////////////////////////////////////////// LOAD_ONCE, innerJoin: false,
						/////////////////////////////////////////////// persistent: false,
						/////////////////////////////////////////////// activateGlobalMap: false)"
						///////////////////////////////////////////////
						// tHash_Lookup_row2.initGet();

						boolean forceLooprow2 = false;
						row2Struct row2ObjectFromLookup = null;
						boolean hasResultFromLookupCacherow2 = false;
						java.util.Map<String, Object> cacheResultrow2 = new java.util.HashMap<String, Object>();

						row2HashKey.BookingID = benevolerequest.BookingID;
						row2HashKey.hashCodeDirty = true;

						if (!rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT) {// TD120

							tHash_Lookup_row2.lookup(row2HashKey);

							if (hasResultFromLookupCacherow2 || tHash_Lookup_row2.hasNext()) {

							} else {

								row2 = row2Default;

							}
						} // TD120

						row2Struct fromLookup_row2 = null;
						row2 = row2Default;

						if (hasResultFromLookupCacherow2) {// TD10086

						} else if (!rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT) {

							while (tHash_Lookup_row2.hasNext()) {// TD119
								fromLookup_row2 = null;
								row2 = row2Default;
								fromLookup_row2 = tHash_Lookup_row2.next();
								if (fromLookup_row2 != null) {

									row2 = fromLookup_row2;

								}
							} // TD119

						} // TD10086

						//////////////////////////////////////////////////////////////////////////////////////////////

						/////////////////////////////////////////////////////////////////////////////////////////////////

						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tXMLMap_3_TXMLMAP_OUT__Struct Var = Var__tXMLMap_3_TXMLMAP_OUT;
							// ###############################
							// # Output tables

							copyOfSortieBenevole = null;

// # Output table : 'copyOfSortieBenevole'

							if (!docAlreadyInstanciate_copyOfSortieBenevole) {
								docAlreadyInstanciate_copyOfSortieBenevole = true;
								gen_Doc_copyOfSortieBenevole_tXMLMap_3_TXMLMAP_OUT = new GenerateDocument_copyOfSortieBenevole();
//init one new out struct for cache the result.
								copyOfSortieBenevole_aggregate = new copyOfSortieBenevoleStruct();
								copyOfSortieBenevole_aggregate.body = new routines.system.Document();
								copyOfSortieBenevole_aggregate.body
										.setDocument(gen_Doc_copyOfSortieBenevole_tXMLMap_3_TXMLMAP_OUT.getDocument());

//construct the resultset
								allOutsForAggregate_tXMLMap_3.add(copyOfSortieBenevole_aggregate);
							}

							gen_Doc_copyOfSortieBenevole_tXMLMap_3_TXMLMAP_OUT.generateElements(
									rejectedDocInnerJoin_tXMLMap_3_TXMLMAP_OUT, benevolerequest, row2, Var);

// ###############################

						} // end of Var scope

						rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;

						tos_count_tXMLMap_3_TXMLMAP_OUT++;

						/**
						 * [tXMLMap_3_TXMLMAP_OUT main ] stop
						 */

						/**
						 * [tXMLMap_3_TXMLMAP_OUT process_data_begin ] start
						 */

						currentVirtualComponent = "tXMLMap_3";

						currentComponent = "tXMLMap_3_TXMLMAP_OUT";

						/**
						 * [tXMLMap_3_TXMLMAP_OUT process_data_begin ] stop
						 */

						/**
						 * [tXMLMap_3_TXMLMAP_OUT process_data_end ] start
						 */

						currentVirtualComponent = "tXMLMap_3";

						currentComponent = "tXMLMap_3_TXMLMAP_OUT";

						/**
						 * [tXMLMap_3_TXMLMAP_OUT process_data_end ] stop
						 */

					} // End of branch "benevolerequest"

// Start of branch "benevoleposition"
					if (benevoleposition != null) {

						/**
						 * [tXMLMap_4_TXMLMAP_OUT main ] start
						 */

						currentVirtualComponent = "tXMLMap_4";

						currentComponent = "tXMLMap_4_TXMLMAP_OUT";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "benevoleposition");
						}

						boolean rejectedInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;
						boolean rejectedDocInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;
						boolean mainRowRejected_tXMLMap_4_TXMLMAP_OUT = false;
						boolean isMatchDocRowtXMLMap_4_TXMLMAP_OUT = false;

						copyOfcopyOfSortieBenevole_tmp.body = null;

						///////////////////////////////////////////////
						// Starting Lookup Table
						/////////////////////////////////////////////// "org.talend.designer.xmlmap.model.emf.xmlmap.impl.InputXmlTreeImpl@6ed13101
						/////////////////////////////////////////////// (expressionFilter: null,
						/////////////////////////////////////////////// activateExpressionFilter: false,
						/////////////////////////////////////////////// activateCondensedTool: false,
						/////////////////////////////////////////////// minimized: false, name: row3,
						/////////////////////////////////////////////// multiLoops: false) (lookup:
						/////////////////////////////////////////////// true, matchingMode:
						/////////////////////////////////////////////// UNIQUE_MATCH, lookupMode:
						/////////////////////////////////////////////// LOAD_ONCE, innerJoin: false,
						/////////////////////////////////////////////// persistent: false,
						/////////////////////////////////////////////// activateGlobalMap: false)"
						///////////////////////////////////////////////
						// tHash_Lookup_row3.initGet();

						boolean forceLooprow3 = false;
						row3Struct row3ObjectFromLookup = null;
						boolean hasResultFromLookupCacherow3 = false;
						java.util.Map<String, Object> cacheResultrow3 = new java.util.HashMap<String, Object>();

						row3HashKey.BookingID = "7659";
						row3HashKey.hashCodeDirty = true;

						if (!rejectedInnerJoin_tXMLMap_4_TXMLMAP_OUT) {// TD120

							tHash_Lookup_row3.lookup(row3HashKey);

							if (hasResultFromLookupCacherow3 || tHash_Lookup_row3.hasNext()) {

							} else {

								row3 = row3Default;

							}
						} // TD120

						row3Struct fromLookup_row3 = null;
						row3 = row3Default;

						if (hasResultFromLookupCacherow3) {// TD10086

						} else if (!rejectedInnerJoin_tXMLMap_4_TXMLMAP_OUT) {

							while (tHash_Lookup_row3.hasNext()) {// TD119
								fromLookup_row3 = null;
								row3 = row3Default;
								fromLookup_row3 = tHash_Lookup_row3.next();
								if (fromLookup_row3 != null) {

									row3 = fromLookup_row3;

								}
							} // TD119

						} // TD10086

						//////////////////////////////////////////////////////////////////////////////////////////////

						/////////////////////////////////////////////////////////////////////////////////////////////////

						///////////////////////////////////////////////
						// Starting Lookup Table
						/////////////////////////////////////////////// "org.talend.designer.xmlmap.model.emf.xmlmap.impl.InputXmlTreeImpl@41ecb16f
						/////////////////////////////////////////////// (expressionFilter: null,
						/////////////////////////////////////////////// activateExpressionFilter: false,
						/////////////////////////////////////////////// activateCondensedTool: false,
						/////////////////////////////////////////////// minimized: false, name: row5,
						/////////////////////////////////////////////// multiLoops: false) (lookup:
						/////////////////////////////////////////////// true, matchingMode: ALL_ROWS,
						/////////////////////////////////////////////// lookupMode: LOAD_ONCE,
						/////////////////////////////////////////////// innerJoin: false, persistent:
						/////////////////////////////////////////////// false, activateGlobalMap:
						/////////////////////////////////////////////// false)"
						///////////////////////////////////////////////
						// tHash_Lookup_row5.initGet();

						boolean forceLooprow5 = false;
						row5Struct row5ObjectFromLookup = null;
						boolean hasResultFromLookupCacherow5 = false;
						java.util.Map<String, Object> cacheResultrow5 = new java.util.HashMap<String, Object>();

						if (!rejectedInnerJoin_tXMLMap_4_TXMLMAP_OUT) {// TD120

							tHash_Lookup_row5.lookup(row5HashKey);

							if (hasResultFromLookupCacherow5 || tHash_Lookup_row5.hasNext()) {

							} else {

								row5 = row5Default;

								forceLooprow5 = true;

							}
						} // TD120

						if (rejectedInnerJoin_tXMLMap_4_TXMLMAP_OUT) {
							forceLooprow5 = true;
						}

						row5Struct fromLookup_row5 = null;
						row5 = row5Default;

						//////////////////////////////////////////////////////////////////////////////////////////////

						boolean fromCacherow5 = hasResultFromLookupCacherow5;
						List<java.util.Map<String, Object>> multipleResultSetrow5 = new java.util.ArrayList<java.util.Map<String, Object>>();
						// the var for cache the row5Struct
						java.util.Map<String, Object> oneRow_row5 = null;
						if (hasResultFromLookupCacherow5) {

						} else if (!rejectedInnerJoin_tXMLMap_4_TXMLMAP_OUT) {

							while (tHash_Lookup_row5.hasNext()) {
								fromLookup_row5 = null;
								row5 = row5Default;
								fromLookup_row5 = tHash_Lookup_row5.next();
								if (fromLookup_row5 != null) {

									row5 = fromLookup_row5;
									// construct the resultset for mutiple lookup when no document lookup.
									oneRow_row5 = new java.util.HashMap<String, Object>();
									oneRow_row5.put("row5", row5);
									multipleResultSetrow5.add(oneRow_row5);

								}
							} // end while

						} // end else if
							// now not support cache all_matches lookup

						java.util.Iterator<java.util.Map<String, Object>> iterrow5 = multipleResultSetrow5.iterator();
						while (iterrow5.hasNext() || forceLooprow5) { // G_TM_M_002
							row5 = row5Default;
							row5Struct tempLookuprow5 = null;
							if (!forceLooprow5) {
								java.util.Map<String, Object> oneRowrow5 = iterrow5.next();

								tempLookuprow5 = (row5Struct) oneRowrow5.get("row5");
								if (tempLookuprow5 != null) {
									row5 = tempLookuprow5;
								}

							}
							forceLooprow5 = false;

							/////////////////////////////////////////////////////////////////////////////////////////////////

							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tXMLMap_4_TXMLMAP_OUT__Struct Var = Var__tXMLMap_4_TXMLMAP_OUT;
								// ###############################
								// # Output tables

								copyOfcopyOfSortieBenevole = null;

// # Output table : 'copyOfcopyOfSortieBenevole'

								if (!docAlreadyInstanciate_copyOfcopyOfSortieBenevole) {
									docAlreadyInstanciate_copyOfcopyOfSortieBenevole = true;
									gen_Doc_copyOfcopyOfSortieBenevole_tXMLMap_4_TXMLMAP_OUT = new GenerateDocument_copyOfcopyOfSortieBenevole();
//init one new out struct for cache the result.
									copyOfcopyOfSortieBenevole_aggregate = new copyOfcopyOfSortieBenevoleStruct();
									copyOfcopyOfSortieBenevole_aggregate.body = new routines.system.Document();
									copyOfcopyOfSortieBenevole_aggregate.body.setDocument(
											gen_Doc_copyOfcopyOfSortieBenevole_tXMLMap_4_TXMLMAP_OUT.getDocument());

//construct the resultset
									allOutsForAggregate_tXMLMap_4.add(copyOfcopyOfSortieBenevole_aggregate);
								}

								gen_Doc_copyOfcopyOfSortieBenevole_tXMLMap_4_TXMLMAP_OUT.generateElements(
										rejectedDocInnerJoin_tXMLMap_4_TXMLMAP_OUT, benevoleposition, row3, row5, Var);

// ###############################

							} // end of Var scope

							rejectedInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;

						} // G_TM_M_002

						tos_count_tXMLMap_4_TXMLMAP_OUT++;

						/**
						 * [tXMLMap_4_TXMLMAP_OUT main ] stop
						 */

						/**
						 * [tXMLMap_4_TXMLMAP_OUT process_data_begin ] start
						 */

						currentVirtualComponent = "tXMLMap_4";

						currentComponent = "tXMLMap_4_TXMLMAP_OUT";

						/**
						 * [tXMLMap_4_TXMLMAP_OUT process_data_begin ] stop
						 */

						/**
						 * [tXMLMap_4_TXMLMAP_OUT process_data_end ] start
						 */

						currentVirtualComponent = "tXMLMap_4";

						currentComponent = "tXMLMap_4_TXMLMAP_OUT";

						/**
						 * [tXMLMap_4_TXMLMAP_OUT process_data_end ] stop
						 */

					} // End of branch "benevoleposition"

					/**
					 * [tRESTRequest_1_In process_data_end ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_In";

					/**
					 * [tRESTRequest_1_In process_data_end ] stop
					 */

					/**
					 * [tRESTRequest_1_In end ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_In";

					resourceMap.put("inIterateVComp", true);

					ok_Hash.put("tRESTRequest_1_In", true);
					end_Hash.put("tRESTRequest_1_In", System.currentTimeMillis());

					/**
					 * [tRESTRequest_1_In end ] stop
					 */

					/**
					 * [tXMLMap_1 end ] start
					 */

					currentComponent = "tXMLMap_1";

					if (execStat) {
						runStat.updateStat(resourceMap, iterateId, 2, 0, "Requete");
					}

					ok_Hash.put("tXMLMap_1", true);
					end_Hash.put("tXMLMap_1", System.currentTimeMillis());

					/**
					 * [tXMLMap_1 end ] stop
					 */

					/**
					 * [tRESTResponse_1 end ] start
					 */

					currentComponent = "tRESTResponse_1";

					if (execStat) {
						runStat.updateStat(resourceMap, iterateId, 2, 0, "Reponse");
					}

					ok_Hash.put("tRESTResponse_1", true);
					end_Hash.put("tRESTResponse_1", System.currentTimeMillis());

					/**
					 * [tRESTResponse_1 end ] stop
					 */

					/**
					 * [tFlowToIterate_1 end ] start
					 */

					currentComponent = "tFlowToIterate_1";

					globalMap.put("tFlowToIterate_1_NB_LINE", nb_line_tFlowToIterate_1);
					if (execStat) {
						runStat.updateStat(resourceMap, iterateId, 2, 0, "benevolesrequest");
					}

					ok_Hash.put("tFlowToIterate_1", true);
					end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

					/**
					 * [tFlowToIterate_1 end ] stop
					 */

					/**
					 * [tXMLMap_3_TXMLMAP_OUT end ] start
					 */

					currentVirtualComponent = "tXMLMap_3";

					currentComponent = "tXMLMap_3_TXMLMAP_OUT";

					if (execStat) {
						runStat.updateStat(resourceMap, iterateId, 2, 0, "benevolerequest");
					}

					ok_Hash.put("tXMLMap_3_TXMLMAP_OUT", true);
					end_Hash.put("tXMLMap_3_TXMLMAP_OUT", System.currentTimeMillis());

					/**
					 * [tXMLMap_3_TXMLMAP_OUT end ] stop
					 */

					/**
					 * [tRESTResponse_3 begin ] start
					 */

					ok_Hash.put("tRESTResponse_3", false);
					start_Hash.put("tRESTResponse_3", System.currentTimeMillis());

					currentComponent = "tRESTResponse_3";

					if (execStat) {
						runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfSortieBenevole");
					}

					int tos_count_tRESTResponse_3 = 0;

					/**
					 * [tRESTResponse_3 begin ] stop
					 */

					/**
					 * [tXMLMap_3_TXMLMAP_IN begin ] start
					 */

					ok_Hash.put("tXMLMap_3_TXMLMAP_IN", false);
					start_Hash.put("tXMLMap_3_TXMLMAP_IN", System.currentTimeMillis());

					currentVirtualComponent = "tXMLMap_3";

					currentComponent = "tXMLMap_3_TXMLMAP_IN";

					int tos_count_tXMLMap_3_TXMLMAP_IN = 0;

					java.util.List<Object> outs_tXMLMap_3 = (java.util.List<Object>) globalMap
							.get("allOutsForAggregate_tXMLMap_3");
					for (Object row_out_tXMLMap_3_TXMLMAP_IN : outs_tXMLMap_3) {// TD512

						/**
						 * [tXMLMap_3_TXMLMAP_IN begin ] stop
						 */

						/**
						 * [tXMLMap_3_TXMLMAP_IN main ] start
						 */

						currentVirtualComponent = "tXMLMap_3";

						currentComponent = "tXMLMap_3_TXMLMAP_IN";

						copyOfSortieBenevole = null;
						if (row_out_tXMLMap_3_TXMLMAP_IN != null
								&& row_out_tXMLMap_3_TXMLMAP_IN instanceof copyOfSortieBenevoleStruct) {
							copyOfSortieBenevole = (copyOfSortieBenevoleStruct) row_out_tXMLMap_3_TXMLMAP_IN;
							routines.system.NestXMLTool.generateOk(copyOfSortieBenevole.body, false);
						}

						tos_count_tXMLMap_3_TXMLMAP_IN++;

						/**
						 * [tXMLMap_3_TXMLMAP_IN main ] stop
						 */

						/**
						 * [tXMLMap_3_TXMLMAP_IN process_data_begin ] start
						 */

						currentVirtualComponent = "tXMLMap_3";

						currentComponent = "tXMLMap_3_TXMLMAP_IN";

						/**
						 * [tXMLMap_3_TXMLMAP_IN process_data_begin ] stop
						 */
// Start of branch "copyOfSortieBenevole"
						if (copyOfSortieBenevole != null) {

							/**
							 * [tRESTResponse_3 main ] start
							 */

							currentComponent = "tRESTResponse_3";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfSortieBenevole");
							}

							java.io.OutputStream outputStream_tRESTResponse_3 = (java.io.OutputStream) globalMap
									.get("restResponseStream");
							boolean responseAlreadySent_tRESTResponse_3 = globalMap.containsKey("restResponse");

							if (null == outputStream_tRESTResponse_3 && responseAlreadySent_tRESTResponse_3) {
								throw new RuntimeException("Rest response already sent.");
							} else if (!globalMap.containsKey("restRequest")) {
								throw new RuntimeException("Not received rest request yet.");
							} else {
								Integer restProviderStatusCode_tRESTResponse_3 = 200;

								Object restProviderResponse_tRESTResponse_3 = null;
								if (null != copyOfSortieBenevole.body) {
									restProviderResponse_tRESTResponse_3 = copyOfSortieBenevole.body.getDocument();
								}

								java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_3 = new java.util.TreeMap<String, String>(
										String.CASE_INSENSITIVE_ORDER);

								java.util.Map<String, Object> restRequest_tRESTResponse_3 = (java.util.Map<String, Object>) globalMap
										.get("restRequest");
								org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_3 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_3
										.get("MESSAGE_CONTEXT");

								if (null == outputStream_tRESTResponse_3) {
									java.util.Map<String, Object> restResponse_tRESTResponse_3 = new java.util.HashMap<String, Object>();
									restResponse_tRESTResponse_3.put("BODY", restProviderResponse_tRESTResponse_3);
									restResponse_tRESTResponse_3.put("STATUS", restProviderStatusCode_tRESTResponse_3);
									restResponse_tRESTResponse_3.put("HEADERS",
											restProviderResponseHeaders_tRESTResponse_3);
									restResponse_tRESTResponse_3.put("drop.json.root.element", Boolean.valueOf(false));
									globalMap.put("restResponse", restResponse_tRESTResponse_3);

								} else {

									javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_3 = null;
									if (!responseAlreadySent_tRESTResponse_3) {
										org.apache.cxf.message.Message currentMessage = null;
										if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
											currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
										} else {
											currentMessage = ((org.apache.cxf.message.Message) restRequest_tRESTResponse_3
													.get("CURRENT_MESSAGE"));
										}

										if (currentMessage != null && currentMessage.getExchange() != null) {
											currentMessage.getExchange()
													.put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION, true);
										}

										messageContext_tRESTResponse_3.put(org.apache.cxf.message.Message.RESPONSE_CODE,
												restProviderStatusCode_tRESTResponse_3);
										javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_3 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
										for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_3
												.entrySet()) {
											headersMultivaluedMap_tRESTResponse_3.putSingle(multivaluedHeader.getKey(),
													multivaluedHeader.getValue());
										}
										messageContext_tRESTResponse_3.put(
												org.apache.cxf.message.Message.PROTOCOL_HEADERS,
												headersMultivaluedMap_tRESTResponse_3);

										String responseContentType_tRESTResponse_3 = null;

										if (currentMessage != null && currentMessage.getExchange() != null) {
											responseContentType_tRESTResponse_3 = (String) currentMessage.getExchange()
													.get(org.apache.cxf.message.Message.CONTENT_TYPE);
										}

										if (null == responseContentType_tRESTResponse_3) {
											// this should not be needed, just in case. set it to the first value in the
											// sorted list returned from HttpHeaders
											responseMediaType_tRESTResponse_3 = messageContext_tRESTResponse_3
													.getHttpHeaders().getAcceptableMediaTypes().get(0);
										} else {
											responseMediaType_tRESTResponse_3 = org.apache.cxf.jaxrs.utils.JAXRSUtils
													.toMediaType(responseContentType_tRESTResponse_3);
										}
										globalMap.put("restResponseMediaType", responseMediaType_tRESTResponse_3);

										String responseMediaSubType_tRESTResponse_3 = responseMediaType_tRESTResponse_3
												.getSubtype();
										if (responseMediaSubType_tRESTResponse_3.equals("xml")
												|| responseMediaSubType_tRESTResponse_3.endsWith("+xml")) {
											outputStream_tRESTResponse_3.write("<wrapper>".getBytes());
											globalMap.put("restResponseWrappingClosure", "</wrapper>");
										}
										if (responseMediaSubType_tRESTResponse_3.equals("json")
												|| responseMediaSubType_tRESTResponse_3.endsWith("+json")) {
											outputStream_tRESTResponse_3.write("[".getBytes());
											globalMap.put("restResponseWrappingClosure", "]");
										}

										globalMap.put("restResponse", true);
									} else {
										responseMediaType_tRESTResponse_3 = (javax.ws.rs.core.MediaType) globalMap
												.get("restResponseMediaType");
									}

									if (null != restProviderResponse_tRESTResponse_3) {
										String responseMediaSubType_tRESTResponse_3 = responseMediaType_tRESTResponse_3
												.getSubtype();
										if (responseMediaSubType_tRESTResponse_3.equals("json")
												|| responseMediaSubType_tRESTResponse_3.endsWith("+json")) {
											if (globalMap.containsKey("restResponseJsonStarted")) {
												outputStream_tRESTResponse_3.write(",".getBytes());
											} else {
												globalMap.put("restResponseJsonStarted", true);
											}
										}

										Class<? extends Object> responseBodyClass_tRESTResponse_3 = restProviderResponse_tRESTResponse_3
												.getClass();
										javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_3 = messageContext_tRESTResponse_3
												.getProviders();
										javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_3 = messageBodyProviders_tRESTResponse_3
												.getMessageBodyWriter(responseBodyClass_tRESTResponse_3,
														responseBodyClass_tRESTResponse_3, null,
														responseMediaType_tRESTResponse_3);

										if (messageBodyWriter_tRESTResponse_3 instanceof StreamingDOM4JProvider) {
											((StreamingDOM4JProvider) messageBodyWriter_tRESTResponse_3)
													.setGlobalMap(globalMap);
										}

										messageBodyWriter_tRESTResponse_3.writeTo(restProviderResponse_tRESTResponse_3,
												responseBodyClass_tRESTResponse_3, responseBodyClass_tRESTResponse_3,
												new java.lang.annotation.Annotation[] {},
												responseMediaType_tRESTResponse_3, null, outputStream_tRESTResponse_3);
									}
									// initial variant
									// outputStream_tRESTResponse_3.write(String.valueOf(restProviderResponse_tRESTResponse_3).getBytes());
									outputStream_tRESTResponse_3.flush();
								}
							}

							tos_count_tRESTResponse_3++;

							/**
							 * [tRESTResponse_3 main ] stop
							 */

							/**
							 * [tRESTResponse_3 process_data_begin ] start
							 */

							currentComponent = "tRESTResponse_3";

							/**
							 * [tRESTResponse_3 process_data_begin ] stop
							 */

							/**
							 * [tRESTResponse_3 process_data_end ] start
							 */

							currentComponent = "tRESTResponse_3";

							/**
							 * [tRESTResponse_3 process_data_end ] stop
							 */

						} // End of branch "copyOfSortieBenevole"

						/**
						 * [tXMLMap_3_TXMLMAP_IN process_data_end ] start
						 */

						currentVirtualComponent = "tXMLMap_3";

						currentComponent = "tXMLMap_3_TXMLMAP_IN";

						/**
						 * [tXMLMap_3_TXMLMAP_IN process_data_end ] stop
						 */

						/**
						 * [tXMLMap_3_TXMLMAP_IN end ] start
						 */

						currentVirtualComponent = "tXMLMap_3";

						currentComponent = "tXMLMap_3_TXMLMAP_IN";

					} // TD512

					ok_Hash.put("tXMLMap_3_TXMLMAP_IN", true);
					end_Hash.put("tXMLMap_3_TXMLMAP_IN", System.currentTimeMillis());

					/**
					 * [tXMLMap_3_TXMLMAP_IN end ] stop
					 */

					/**
					 * [tRESTResponse_3 end ] start
					 */

					currentComponent = "tRESTResponse_3";

					if (execStat) {
						runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfSortieBenevole");
					}

					ok_Hash.put("tRESTResponse_3", true);
					end_Hash.put("tRESTResponse_3", System.currentTimeMillis());

					/**
					 * [tRESTResponse_3 end ] stop
					 */

					/**
					 * [tXMLMap_4_TXMLMAP_OUT end ] start
					 */

					currentVirtualComponent = "tXMLMap_4";

					currentComponent = "tXMLMap_4_TXMLMAP_OUT";

					if (execStat) {
						runStat.updateStat(resourceMap, iterateId, 2, 0, "benevoleposition");
					}

					ok_Hash.put("tXMLMap_4_TXMLMAP_OUT", true);
					end_Hash.put("tXMLMap_4_TXMLMAP_OUT", System.currentTimeMillis());

					/**
					 * [tXMLMap_4_TXMLMAP_OUT end ] stop
					 */

					/**
					 * [tRESTResponse_4 begin ] start
					 */

					ok_Hash.put("tRESTResponse_4", false);
					start_Hash.put("tRESTResponse_4", System.currentTimeMillis());

					currentComponent = "tRESTResponse_4";

					if (execStat) {
						runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfSortieBenevole");
					}

					int tos_count_tRESTResponse_4 = 0;

					/**
					 * [tRESTResponse_4 begin ] stop
					 */

					/**
					 * [tXMLMap_4_TXMLMAP_IN begin ] start
					 */

					ok_Hash.put("tXMLMap_4_TXMLMAP_IN", false);
					start_Hash.put("tXMLMap_4_TXMLMAP_IN", System.currentTimeMillis());

					currentVirtualComponent = "tXMLMap_4";

					currentComponent = "tXMLMap_4_TXMLMAP_IN";

					int tos_count_tXMLMap_4_TXMLMAP_IN = 0;

					java.util.List<Object> outs_tXMLMap_4 = (java.util.List<Object>) globalMap
							.get("allOutsForAggregate_tXMLMap_4");
					for (Object row_out_tXMLMap_4_TXMLMAP_IN : outs_tXMLMap_4) {// TD512

						/**
						 * [tXMLMap_4_TXMLMAP_IN begin ] stop
						 */

						/**
						 * [tXMLMap_4_TXMLMAP_IN main ] start
						 */

						currentVirtualComponent = "tXMLMap_4";

						currentComponent = "tXMLMap_4_TXMLMAP_IN";

						copyOfcopyOfSortieBenevole = null;
						if (row_out_tXMLMap_4_TXMLMAP_IN != null
								&& row_out_tXMLMap_4_TXMLMAP_IN instanceof copyOfcopyOfSortieBenevoleStruct) {
							copyOfcopyOfSortieBenevole = (copyOfcopyOfSortieBenevoleStruct) row_out_tXMLMap_4_TXMLMAP_IN;
							routines.system.NestXMLTool.generateOk(copyOfcopyOfSortieBenevole.body, false);
						}

						tos_count_tXMLMap_4_TXMLMAP_IN++;

						/**
						 * [tXMLMap_4_TXMLMAP_IN main ] stop
						 */

						/**
						 * [tXMLMap_4_TXMLMAP_IN process_data_begin ] start
						 */

						currentVirtualComponent = "tXMLMap_4";

						currentComponent = "tXMLMap_4_TXMLMAP_IN";

						/**
						 * [tXMLMap_4_TXMLMAP_IN process_data_begin ] stop
						 */
// Start of branch "copyOfcopyOfSortieBenevole"
						if (copyOfcopyOfSortieBenevole != null) {

							/**
							 * [tRESTResponse_4 main ] start
							 */

							currentComponent = "tRESTResponse_4";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfcopyOfSortieBenevole");
							}

							java.io.OutputStream outputStream_tRESTResponse_4 = (java.io.OutputStream) globalMap
									.get("restResponseStream");
							boolean responseAlreadySent_tRESTResponse_4 = globalMap.containsKey("restResponse");

							if (null == outputStream_tRESTResponse_4 && responseAlreadySent_tRESTResponse_4) {
								throw new RuntimeException("Rest response already sent.");
							} else if (!globalMap.containsKey("restRequest")) {
								throw new RuntimeException("Not received rest request yet.");
							} else {
								Integer restProviderStatusCode_tRESTResponse_4 = 200;

								Object restProviderResponse_tRESTResponse_4 = null;
								if (null != copyOfcopyOfSortieBenevole.body) {
									restProviderResponse_tRESTResponse_4 = copyOfcopyOfSortieBenevole.body
											.getDocument();
								}

								java.util.Map<String, String> restProviderResponseHeaders_tRESTResponse_4 = new java.util.TreeMap<String, String>(
										String.CASE_INSENSITIVE_ORDER);

								java.util.Map<String, Object> restRequest_tRESTResponse_4 = (java.util.Map<String, Object>) globalMap
										.get("restRequest");
								org.apache.cxf.jaxrs.ext.MessageContext messageContext_tRESTResponse_4 = (org.apache.cxf.jaxrs.ext.MessageContext) restRequest_tRESTResponse_4
										.get("MESSAGE_CONTEXT");

								if (null == outputStream_tRESTResponse_4) {
									java.util.Map<String, Object> restResponse_tRESTResponse_4 = new java.util.HashMap<String, Object>();
									restResponse_tRESTResponse_4.put("BODY", restProviderResponse_tRESTResponse_4);
									restResponse_tRESTResponse_4.put("STATUS", restProviderStatusCode_tRESTResponse_4);
									restResponse_tRESTResponse_4.put("HEADERS",
											restProviderResponseHeaders_tRESTResponse_4);
									restResponse_tRESTResponse_4.put("drop.json.root.element", Boolean.valueOf(false));
									globalMap.put("restResponse", restResponse_tRESTResponse_4);

								} else {

									javax.ws.rs.core.MediaType responseMediaType_tRESTResponse_4 = null;
									if (!responseAlreadySent_tRESTResponse_4) {
										org.apache.cxf.message.Message currentMessage = null;
										if (org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage() != null) {
											currentMessage = org.apache.cxf.jaxrs.utils.JAXRSUtils.getCurrentMessage();
										} else {
											currentMessage = ((org.apache.cxf.message.Message) restRequest_tRESTResponse_4
													.get("CURRENT_MESSAGE"));
										}

										if (currentMessage != null && currentMessage.getExchange() != null) {
											currentMessage.getExchange()
													.put(StreamingDOM4JProvider.SUPRESS_XML_DECLARATION, true);
										}

										messageContext_tRESTResponse_4.put(org.apache.cxf.message.Message.RESPONSE_CODE,
												restProviderStatusCode_tRESTResponse_4);
										javax.ws.rs.core.MultivaluedMap<String, String> headersMultivaluedMap_tRESTResponse_4 = new org.apache.cxf.jaxrs.impl.MetadataMap<String, String>();
										for (java.util.Map.Entry<String, String> multivaluedHeader : restProviderResponseHeaders_tRESTResponse_4
												.entrySet()) {
											headersMultivaluedMap_tRESTResponse_4.putSingle(multivaluedHeader.getKey(),
													multivaluedHeader.getValue());
										}
										messageContext_tRESTResponse_4.put(
												org.apache.cxf.message.Message.PROTOCOL_HEADERS,
												headersMultivaluedMap_tRESTResponse_4);

										String responseContentType_tRESTResponse_4 = null;

										if (currentMessage != null && currentMessage.getExchange() != null) {
											responseContentType_tRESTResponse_4 = (String) currentMessage.getExchange()
													.get(org.apache.cxf.message.Message.CONTENT_TYPE);
										}

										if (null == responseContentType_tRESTResponse_4) {
											// this should not be needed, just in case. set it to the first value in the
											// sorted list returned from HttpHeaders
											responseMediaType_tRESTResponse_4 = messageContext_tRESTResponse_4
													.getHttpHeaders().getAcceptableMediaTypes().get(0);
										} else {
											responseMediaType_tRESTResponse_4 = org.apache.cxf.jaxrs.utils.JAXRSUtils
													.toMediaType(responseContentType_tRESTResponse_4);
										}
										globalMap.put("restResponseMediaType", responseMediaType_tRESTResponse_4);

										String responseMediaSubType_tRESTResponse_4 = responseMediaType_tRESTResponse_4
												.getSubtype();
										if (responseMediaSubType_tRESTResponse_4.equals("xml")
												|| responseMediaSubType_tRESTResponse_4.endsWith("+xml")) {
											outputStream_tRESTResponse_4.write("<wrapper>".getBytes());
											globalMap.put("restResponseWrappingClosure", "</wrapper>");
										}
										if (responseMediaSubType_tRESTResponse_4.equals("json")
												|| responseMediaSubType_tRESTResponse_4.endsWith("+json")) {
											outputStream_tRESTResponse_4.write("[".getBytes());
											globalMap.put("restResponseWrappingClosure", "]");
										}

										globalMap.put("restResponse", true);
									} else {
										responseMediaType_tRESTResponse_4 = (javax.ws.rs.core.MediaType) globalMap
												.get("restResponseMediaType");
									}

									if (null != restProviderResponse_tRESTResponse_4) {
										String responseMediaSubType_tRESTResponse_4 = responseMediaType_tRESTResponse_4
												.getSubtype();
										if (responseMediaSubType_tRESTResponse_4.equals("json")
												|| responseMediaSubType_tRESTResponse_4.endsWith("+json")) {
											if (globalMap.containsKey("restResponseJsonStarted")) {
												outputStream_tRESTResponse_4.write(",".getBytes());
											} else {
												globalMap.put("restResponseJsonStarted", true);
											}
										}

										Class<? extends Object> responseBodyClass_tRESTResponse_4 = restProviderResponse_tRESTResponse_4
												.getClass();
										javax.ws.rs.ext.Providers messageBodyProviders_tRESTResponse_4 = messageContext_tRESTResponse_4
												.getProviders();
										javax.ws.rs.ext.MessageBodyWriter messageBodyWriter_tRESTResponse_4 = messageBodyProviders_tRESTResponse_4
												.getMessageBodyWriter(responseBodyClass_tRESTResponse_4,
														responseBodyClass_tRESTResponse_4, null,
														responseMediaType_tRESTResponse_4);

										if (messageBodyWriter_tRESTResponse_4 instanceof StreamingDOM4JProvider) {
											((StreamingDOM4JProvider) messageBodyWriter_tRESTResponse_4)
													.setGlobalMap(globalMap);
										}

										messageBodyWriter_tRESTResponse_4.writeTo(restProviderResponse_tRESTResponse_4,
												responseBodyClass_tRESTResponse_4, responseBodyClass_tRESTResponse_4,
												new java.lang.annotation.Annotation[] {},
												responseMediaType_tRESTResponse_4, null, outputStream_tRESTResponse_4);
									}
									// initial variant
									// outputStream_tRESTResponse_4.write(String.valueOf(restProviderResponse_tRESTResponse_4).getBytes());
									outputStream_tRESTResponse_4.flush();
								}
							}

							tos_count_tRESTResponse_4++;

							/**
							 * [tRESTResponse_4 main ] stop
							 */

							/**
							 * [tRESTResponse_4 process_data_begin ] start
							 */

							currentComponent = "tRESTResponse_4";

							/**
							 * [tRESTResponse_4 process_data_begin ] stop
							 */

							/**
							 * [tRESTResponse_4 process_data_end ] start
							 */

							currentComponent = "tRESTResponse_4";

							/**
							 * [tRESTResponse_4 process_data_end ] stop
							 */

						} // End of branch "copyOfcopyOfSortieBenevole"

						/**
						 * [tXMLMap_4_TXMLMAP_IN process_data_end ] start
						 */

						currentVirtualComponent = "tXMLMap_4";

						currentComponent = "tXMLMap_4_TXMLMAP_IN";

						/**
						 * [tXMLMap_4_TXMLMAP_IN process_data_end ] stop
						 */

						/**
						 * [tXMLMap_4_TXMLMAP_IN end ] start
						 */

						currentVirtualComponent = "tXMLMap_4";

						currentComponent = "tXMLMap_4_TXMLMAP_IN";

					} // TD512

					ok_Hash.put("tXMLMap_4_TXMLMAP_IN", true);
					end_Hash.put("tXMLMap_4_TXMLMAP_IN", System.currentTimeMillis());

					/**
					 * [tXMLMap_4_TXMLMAP_IN end ] stop
					 */

					/**
					 * [tRESTResponse_4 end ] start
					 */

					currentComponent = "tRESTResponse_4";

					if (execStat) {
						runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfSortieBenevole");
					}

					ok_Hash.put("tRESTResponse_4", true);
					end_Hash.put("tRESTResponse_4", System.currentTimeMillis());

					/**
					 * [tRESTResponse_4 end ] stop
					 */

					if (execStat) {
						runStat.updateStatOnConnection("Iterate", 2, "exec" + NB_ITERATE_tRESTRequest_1_In);
					}

					/**
					 * [tRESTRequest_1_Loop process_data_end ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_Loop";

					/**
					 * [tRESTRequest_1_Loop process_data_end ] stop
					 */

					/**
					 * [tRESTRequest_1_Loop end ] start
					 */

					currentVirtualComponent = "tRESTRequest_1";

					currentComponent = "tRESTRequest_1_Loop";

					resourceMap.remove("inIterateVComp");

				} catch (Throwable e_tRESTRequest_1) {
					if (e_tRESTRequest_1 instanceof Exception) {
						new TalendException((Exception) e_tRESTRequest_1, currentComponent, globalMap)
								.printStackTrace();
					} else {
						new TalendException(new RuntimeException(e_tRESTRequest_1), currentComponent, globalMap)
								.printStackTrace();
					}
					if (!globalMap.containsKey("restResponse")) {
						java.util.Map<String, Object> restFault_tRESTRequest_1 = new java.util.HashMap<String, Object>();
						restFault_tRESTRequest_1.put("STATUS", 500);
						restFault_tRESTRequest_1.put("BODY", e_tRESTRequest_1.getMessage());
						globalMap.put("restResponse", restFault_tRESTRequest_1);
					}
					return;
				}
				nb_line_tRESTRequest_1++;
				globalMap.put("tRESTRequest_1_NB_LINE", nb_line_tRESTRequest_1);

				if (execStat) {
					runStat.updateStatOnConnection(iterateId, 2, 0, "Requete", "Reponse", "benevolesrequest",
							"benevolerequest", "copyOfSortieBenevole", "benevoleposition",
							"copyOfcopyOfSortieBenevole");
				}

				ok_Hash.put("tRESTRequest_1_Loop", true);
				end_Hash.put("tRESTRequest_1_Loop", System.currentTimeMillis());

				/**
				 * [tRESTRequest_1_Loop end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRESTRequest_1_Loop finally ] start
				 */

				currentVirtualComponent = "tRESTRequest_1";

				currentComponent = "tRESTRequest_1_Loop";

				/**
				 * [tRESTRequest_1_Loop finally ] stop
				 */

				/**
				 * [tRESTRequest_1_In finally ] start
				 */

				currentVirtualComponent = "tRESTRequest_1";

				currentComponent = "tRESTRequest_1_In";

				/**
				 * [tRESTRequest_1_In finally ] stop
				 */

				/**
				 * [tXMLMap_1 finally ] start
				 */

				currentComponent = "tXMLMap_1";

				/**
				 * [tXMLMap_1 finally ] stop
				 */

				/**
				 * [tRESTResponse_1 finally ] start
				 */

				currentComponent = "tRESTResponse_1";

				/**
				 * [tRESTResponse_1 finally ] stop
				 */

				/**
				 * [tFlowToIterate_1 finally ] start
				 */

				currentComponent = "tFlowToIterate_1";

				/**
				 * [tFlowToIterate_1 finally ] stop
				 */

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tXMLMap_2_TXMLMAP_OUT finally ] start
				 */

				currentVirtualComponent = "tXMLMap_2";

				currentComponent = "tXMLMap_2_TXMLMAP_OUT";

				/**
				 * [tXMLMap_2_TXMLMAP_OUT finally ] stop
				 */

				/**
				 * [tXMLMap_2_TXMLMAP_IN finally ] start
				 */

				currentVirtualComponent = "tXMLMap_2";

				currentComponent = "tXMLMap_2_TXMLMAP_IN";

				/**
				 * [tXMLMap_2_TXMLMAP_IN finally ] stop
				 */

				/**
				 * [tRESTResponse_2 finally ] start
				 */

				currentComponent = "tRESTResponse_2";

				/**
				 * [tRESTResponse_2 finally ] stop
				 */

				/**
				 * [tXMLMap_3_TXMLMAP_OUT finally ] start
				 */

				currentVirtualComponent = "tXMLMap_3";

				currentComponent = "tXMLMap_3_TXMLMAP_OUT";

				/**
				 * [tXMLMap_3_TXMLMAP_OUT finally ] stop
				 */

				/**
				 * [tXMLMap_3_TXMLMAP_IN finally ] start
				 */

				currentVirtualComponent = "tXMLMap_3";

				currentComponent = "tXMLMap_3_TXMLMAP_IN";

				/**
				 * [tXMLMap_3_TXMLMAP_IN finally ] stop
				 */

				/**
				 * [tRESTResponse_3 finally ] start
				 */

				currentComponent = "tRESTResponse_3";

				/**
				 * [tRESTResponse_3 finally ] stop
				 */

				/**
				 * [tXMLMap_4_TXMLMAP_OUT finally ] start
				 */

				currentVirtualComponent = "tXMLMap_4";

				currentComponent = "tXMLMap_4_TXMLMAP_OUT";

				/**
				 * [tXMLMap_4_TXMLMAP_OUT finally ] stop
				 */

				/**
				 * [tXMLMap_4_TXMLMAP_IN finally ] start
				 */

				currentVirtualComponent = "tXMLMap_4";

				currentComponent = "tXMLMap_4_TXMLMAP_IN";

				/**
				 * [tXMLMap_4_TXMLMAP_IN finally ] stop
				 */

				/**
				 * [tRESTResponse_4 finally ] start
				 */

				currentComponent = "tRESTResponse_4";

				/**
				 * [tRESTResponse_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRESTRequest_1_Loop_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final FestiNeuch FestiNeuchClass = new FestiNeuch();

		int exitCode = FestiNeuchClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = FestiNeuch.class.getClassLoader()
					.getResourceAsStream("festineuch_project/festineuch_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = FestiNeuch.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tRESTRequest_1_LoopProcess(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRESTRequest_1_Loop) {
			globalMap.put("tRESTRequest_1_Loop_SUBPROCESS_STATE", -1);

			e_tRESTRequest_1_Loop.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : FestiNeuch");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 292652 characters generated by Talend Open Studio for ESB on the 2. juin 2021
 * 22:15:12 CEST
 ************************************************************************************************/